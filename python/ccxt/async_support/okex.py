# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange

# -----------------------------------------------------------------------------

try:
    basestring  # Python 3
except NameError:
    basestring = str  # Python 2
import hashlib
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import AccountSuspended
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidAddress
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import CancelPending
from ccxt.base.errors import NotSupported
from ccxt.base.errors import DDoSProtection
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import ExchangeNotAvailable
from ccxt.base.errors import OnMaintenance
from ccxt.base.errors import InvalidNonce
from ccxt.base.errors import RequestTimeout
from ccxt.base.errors import NetworkError
from ccxt.base.decimal_to_precision import TRUNCATE
from ccxt.base.decimal_to_precision import TICK_SIZE
from ccxt.base.precise import Precise


class okex(Exchange):

    def describe(self):
        return self.deep_extend(super(okex, self).describe(), {
            'id': 'okex',
            'name': 'OKEX',
            'countries': ['CN', 'US'],
            'version': 'v5',
            'rateLimit': 1000,  # up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
            'pro': True,
            'has': {
                'CORS': False,
                'cancelOrder': True,
                'createOrder': True,
                'fetchBalance': True,
                'fetchClosedOrders': True,
                'fetchCurrencies': False,  # see below
                'fetchDepositAddress': True,
                'fetchDeposits': True,
                'fetchLedger': True,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrderTrades': True,
                'fetchPosition': True,
                'fetchPositions': True,
                'fetchStatus': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': True,
                'fetchTrades': True,
                'fetchWithdrawals': True,
                'withdraw': True,
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1H',
                '2h': '2H',
                '4h': '4H',
                '6h': '6H',
                '12h': '12H',
                '1d': '1D',
                '1w': '1W',
                '1M': '1M',
                '3M': '3M',
                '6M': '6M',
                '1y': '1Y',
            },
            'hostname': 'www.okex.com',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg',
                'api': {
                    'rest': 'https://{hostname}',
                },
                'www': 'https://www.okex.com',
                'doc': 'https://www.okex.com/docs/en/',
                'fees': 'https://www.okex.com/pages/products/fees.html',
                'referral': 'https://www.okex.com/join/1888677',
                'test': {
                    'rest': 'https://www.okex.com',
                    # 'rest': 'https://testnet.okex.com',
                },
            },
            'api': {
                'public': {
                    'get': [
                        'market/tickers',
                        'market/ticker',
                        'market/index-tickers',
                        'market/books',
                        'market/candles',
                        'market/history-candles',
                        'market/index-candles',
                        'market/mark-price-candles',
                        'market/trades',
                        'market/platform-24-volume',
                        'market/oracle',
                        'public/instruments',
                        'public/delivery-exercise-history',
                        'public/open-interest',
                        'public/funding-rate',
                        'public/funding-rate-history',
                        'public/price-limit',
                        'public/opt-summary',
                        'public/estimated-price',
                        'public/discount-rate-interest-free-quota',
                        'public/time',
                        'public/liquidation-orders',
                        'public/mark-price',
                        'public/tier',
                        'system/status',
                    ],
                },
                'private': {
                    'get': [
                        'account/account-position-risk',
                        'account/balance',
                        'account/positions',
                        'account/bills',
                        'account/bills-archive',
                        'account/config',
                        'account/max-size',
                        'account/max-avail-size',
                        'account/leverage-info',
                        'account/max-loan',
                        'account/trade-fee',
                        'account/interest-accrued',
                        'account/interest-rate',
                        'account/max-withdrawal',
                        'asset/deposit-address',
                        'asset/balances',
                        'asset/deposit-history',
                        'asset/withdrawal-history',
                        'asset/currencies',
                        'asset/bills',
                        'asset/piggy-balance',
                        'trade/order',
                        'trade/orders-pending',
                        'trade/orders-history',
                        'trade/orders-history-archive',
                        'trade/fills',
                        'trade/fills-history',
                        'trade/orders-algo-pending',
                        'trade/orders-algo-history',
                        'account/subaccount/balances',
                        'asset/subaccount/bills',
                        'users/subaccount/list',
                    ],
                    'post': [
                        'account/set-position-mode',
                        'account/set-leverage',
                        'account/position/margin-balance',
                        'account/set-greeks',
                        'asset/transfer',
                        'asset/withdrawal',
                        'asset/purchase_redempt',
                        'trade/order',
                        'trade/batch-orders',
                        'trade/cancel-order',
                        'trade/cancel-batch-orders',
                        'trade/amend-order',
                        'trade/amend-batch-orders',
                        'trade/close-position',
                        'trade/order-algo',
                        'trade/cancel-algos',
                        'users/subaccount/delete-apikey',
                        'users/subaccount/modify-apikey',
                        'users/subaccount/apikey',
                        'asset/subaccount/transfer',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'taker': 0.0015,
                    'maker': 0.0010,
                },
                'spot': {
                    'taker': 0.0015,
                    'maker': 0.0010,
                },
                'futures': {
                    'taker': 0.0005,
                    'maker': 0.0002,
                },
                'swap': {
                    'taker': 0.00050,
                    'maker': 0.00020,
                },
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
                'password': True,
            },
            'exceptions': {
                'exact': {
                    # Public error codes from 50000-53999
                    # General Class
                    '1': ExchangeError,  # Operation failed
                    '2': ExchangeError,  # Bulk operation partially succeeded
                    '50000': BadRequest,  # Body can not be empty
                    '50001': OnMaintenance,  # Matching engine upgrading. Please try again later
                    '50002': BadRequest,  # Json data format error
                    '50004': RequestTimeout,  # Endpoint request timeout(does not indicate success or failure of order, please check order status)
                    '50005': ExchangeNotAvailable,  # API is offline or unavailable
                    '50006': BadRequest,  # Invalid Content_Type, please use "application/json" format
                    '50007': AccountSuspended,  # Account blocked
                    '50008': AuthenticationError,  # User does not exist
                    '50009': AccountSuspended,  # Account is suspended due to ongoing liquidation
                    '50010': ExchangeError,  # User ID can not be empty
                    '50011': RateLimitExceeded,  # Request too frequent
                    '50012': ExchangeError,  # Account status invalid
                    '50013': ExchangeNotAvailable,  # System is busy, please try again later
                    '50014': ExchangeError,  # Parameter {0} can not be empty
                    '50015': ExchangeError,  # Either parameter {0} or {1} is required
                    '50016': ExchangeError,  # Parameter {0} does not match parameter {1}
                    '50017': ExchangeError,  # The position is frozen due to ADL. Operation restricted
                    '50018': ExchangeError,  # Currency {0} is frozen due to ADL. Operation restricted
                    '50019': ExchangeError,  # The account is frozen due to ADL. Operation restricted
                    '50020': ExchangeError,  # The position is frozen due to liquidation. Operation restricted
                    '50021': ExchangeError,  # Currency {0} is frozen due to liquidation. Operation restricted
                    '50022': ExchangeError,  # The account is frozen due to liquidation. Operation restricted
                    '50023': ExchangeError,  # Funding fee frozen. Operation restricted
                    '50024': ExchangeError,  # Parameter {0} and {1} can not exist at the same time
                    '50025': ExchangeError,  # Parameter {0} count exceeds the limit {1}
                    '50026': ExchangeError,  # System error
                    '50027': ExchangeError,  # The account is restricted from trading
                    '50028': ExchangeError,  # Unable to take the order, please reach out to support center for details
                    # API Class
                    '50100': ExchangeError,  # API frozen, please contact customer service
                    '50101': ExchangeError,  # Broker id of APIKey does not match current environment
                    '50102': InvalidNonce,  # Timestamp request expired
                    '50103': AuthenticationError,  # Request header "OK_ACCESS_KEY" can not be empty
                    '50104': AuthenticationError,  # Request header "OK_ACCESS_PASSPHRASE" can not be empty
                    '50105': AuthenticationError,  # Request header "OK_ACCESS_PASSPHRASE" incorrect
                    '50106': AuthenticationError,  # Request header "OK_ACCESS_SIGN" can not be empty
                    '50107': AuthenticationError,  # Request header "OK_ACCESS_TIMESTAMP" can not be empty
                    '50108': ExchangeError,  # Exchange ID does not exist
                    '50109': ExchangeError,  # Exchange domain does not exist
                    '50110': PermissionDenied,  # Invalid IP
                    '50111': AuthenticationError,  # Invalid OK_ACCESS_KEY
                    '50112': AuthenticationError,  # Invalid OK_ACCESS_TIMESTAMP
                    '50113': AuthenticationError,  # Invalid signature
                    '50114': AuthenticationError,  # Invalid authorization
                    '50115': BadRequest,  # Invalid request method
                    # Trade Class
                    '51000': BadRequest,  # Parameter {0} error
                    '51001': BadSymbol,  # Instrument ID does not exist
                    '51002': BadSymbol,  # Instrument ID does not match underlying index
                    '51003': BadRequest,  # Either client order ID or order ID is required
                    '51004': InvalidOrder,  # Order amount exceeds current tier limit
                    '51005': InvalidOrder,  # Order amount exceeds the limit
                    '51006': InvalidOrder,  # Order price out of the limit
                    '51007': InvalidOrder,  # Order placement failed. Order amount should be at least 1 contract(showing up when placing an order with less than 1 contract)
                    '51008': InsufficientFunds,  # Order placement failed due to insufficient balance
                    '51009': AccountSuspended,  # Order placement function is blocked by the platform
                    '51010': InsufficientFunds,  # Account level too low
                    '51011': InvalidOrder,  # Duplicated order ID
                    '51012': ExchangeError,  # Token does not exist
                    '51014': ExchangeError,  # Index does not exist
                    '51015': BadSymbol,  # Instrument ID does not match instrument type
                    '51016': InvalidOrder,  # Duplicated client order ID
                    '51017': ExchangeError,  # Borrow amount exceeds the limit
                    '51018': ExchangeError,  # User with option account can not hold net short positions
                    '51019': ExchangeError,  # No net long positions can be held under isolated margin mode in options
                    '51020': InvalidOrder,  # Order amount should be greater than the min available amount
                    '51021': BadSymbol,  # Contract to be listed
                    '51022': BadSymbol,  # Contract suspended
                    '51023': ExchangeError,  # Position does not exist
                    '51024': AccountSuspended,  # Unified accountblocked
                    '51025': ExchangeError,  # Order count exceeds the limit
                    '51026': BadSymbol,  # Instrument type does not match underlying index
                    '51027': BadSymbol,  # Contract expired
                    '51028': BadSymbol,  # Contract under delivery
                    '51029': BadSymbol,  # Contract is being settled
                    '51030': BadSymbol,  # Funding fee is being settled
                    '51031': InvalidOrder,  # This order price is not within the closing price range
                    '51100': InvalidOrder,  # Trading amount does not meet the min tradable amount
                    '51101': InvalidOrder,  # Entered amount exceeds the max pending order amount(Cont) per transaction
                    '51102': InvalidOrder,  # Entered amount exceeds the max pending count
                    '51103': InvalidOrder,  # Entered amount exceeds the max pending order count of the underlying asset
                    '51104': InvalidOrder,  # Entered amount exceeds the max pending order amount(Cont) of the underlying asset
                    '51105': InvalidOrder,  # Entered amount exceeds the max order amount(Cont) of the contract
                    '51106': InvalidOrder,  # Entered amount exceeds the max order amount(Cont) of the underlying asset
                    '51107': InvalidOrder,  # Entered amount exceeds the max holding amount(Cont)
                    '51108': InvalidOrder,  # Positions exceed the limit for closing out with the market price
                    '51109': InvalidOrder,  # No available offer
                    '51110': InvalidOrder,  # You can only place a limit order after Call Auction has started
                    '51111': BadRequest,  # Maximum {0} orders can be placed in bulk
                    '51112': InvalidOrder,  # Close order size exceeds your available size
                    '51113': RateLimitExceeded,  # Market-price liquidation requests too frequent
                    '51115': InvalidOrder,  # Cancel all pending close-orders before liquidation
                    '51116': InvalidOrder,  # Order price or trigger price exceeds {0}
                    '51117': InvalidOrder,  # Pending close-orders count exceeds limit
                    '51118': InvalidOrder,  # Total amount should exceed the min amount per order
                    '51119': InsufficientFunds,  # Order placement failed due to insufficient balance
                    '51120': InvalidOrder,  # Order quantity is less than {0}, please try again
                    '51121': InvalidOrder,  # Order count should be the integer multiples of the lot size
                    '51122': InvalidOrder,  # Order price should be higher than the min price {0}
                    '51124': InvalidOrder,  # You can only place limit orders during call auction
                    '51125': InvalidOrder,  # Currently there are reduce + reverse position pending orders in margin trading. Please cancel all reduce + reverse position pending orders and continue
                    '51126': InvalidOrder,  # Currently there are reduce only pending orders in margin trading.Please cancel all reduce only pending orders and continue
                    '51127': InsufficientFunds,  # Available balance is 0
                    '51128': InvalidOrder,  # Multi-currency margin account can not do cross-margin trading
                    '51129': InvalidOrder,  # The value of the position and buy order has reached the position limit, and no further buying is allowed
                    '51130': BadSymbol,  # Fixed margin currency error
                    '51131': InsufficientFunds,  # Insufficient balance
                    '51132': InvalidOrder,  # Your position amount is negative and less than the minimum trading amount
                    '51133': InvalidOrder,  # Reduce-only feature is unavailable for the spot transactions by multi-currency margin account
                    '51134': InvalidOrder,  # Closing failed. Please check your holdings and pending orders
                    '51135': InvalidOrder,  # Your closing price has triggered the limit price, and the max buy price is {0}
                    '51136': InvalidOrder,  # Your closing price has triggered the limit price, and the min sell price is {0}
                    '51137': InvalidOrder,  # Your opening price has triggered the limit price, and the max buy price is {0}
                    '51138': InvalidOrder,  # Your opening price has triggered the limit price, and the min sell price is {0}
                    '51139': InvalidOrder,  # Reduce-only feature is unavailable for the spot transactions by simple account
                    '51201': InvalidOrder,  # Value of per market order cannot exceed 100,000 USDT
                    '51202': InvalidOrder,  # Market - order amount exceeds the max amount
                    '51203': InvalidOrder,  # Order amount exceeds the limit {0}
                    '51204': InvalidOrder,  # The price for the limit order can not be empty
                    '51205': InvalidOrder,  # Reduce-Only is not available
                    '51250': InvalidOrder,  # Algo order price is out of the available range
                    '51251': InvalidOrder,  # Algo order type error(when user place an iceberg order)
                    '51252': InvalidOrder,  # Algo order price is out of the available range
                    '51253': InvalidOrder,  # Average amount exceeds the limit of per iceberg order
                    '51254': InvalidOrder,  # Iceberg average amount error(when user place an iceberg order)
                    '51255': InvalidOrder,  # Limit of per iceberg order: Total amount/1000 < x <= Total amount
                    '51256': InvalidOrder,  # Iceberg order price variance error
                    '51257': InvalidOrder,  # Trail order callback rate error
                    '51258': InvalidOrder,  # Trail - order placement failed. The trigger price of a sell order should be higher than the last transaction price
                    '51259': InvalidOrder,  # Trail - order placement failed. The trigger price of a buy order should be lower than the last transaction price
                    '51260': InvalidOrder,  # Maximum {0} pending trail - orders can be held at the same time
                    '51261': InvalidOrder,  # Each user can hold up to {0} pending stop - orders at the same time
                    '51262': InvalidOrder,  # Maximum {0} pending iceberg orders can be held at the same time
                    '51263': InvalidOrder,  # Maximum {0} pending time-weighted orders can be held at the same time
                    '51264': InvalidOrder,  # Average amount exceeds the limit of per time-weighted order
                    '51265': InvalidOrder,  # Time-weighted order limit error
                    '51267': InvalidOrder,  # Time-weighted order strategy initiative rate error
                    '51268': InvalidOrder,  # Time-weighted order strategy initiative range error
                    '51269': InvalidOrder,  # Time-weighted order interval error, the interval should be {0}<= x<={1}
                    '51270': InvalidOrder,  # The limit of time-weighted order price variance is 0 < x <= 1%
                    '51271': InvalidOrder,  # Sweep ratio should be 0 < x <= 100%
                    '51272': InvalidOrder,  # Price variance should be 0 < x <= 1%
                    '51273': InvalidOrder,  # Total amount should be more than {0}
                    '51274': InvalidOrder,  # Total quantity of time-weighted order must be larger than single order limit
                    '51275': InvalidOrder,  # The amount of single stop-market order can not exceed the upper limit
                    '51276': InvalidOrder,  # Stop - Market orders cannot specify a price
                    '51277': InvalidOrder,  # TP trigger price can not be higher than the last price
                    '51278': InvalidOrder,  # SL trigger price can not be lower than the last price
                    '51279': InvalidOrder,  # TP trigger price can not be lower than the last price
                    '51280': InvalidOrder,  # SL trigger price can not be higher than the last price
                    '51400': OrderNotFound,  # Cancellation failed as the order does not exist
                    '51401': OrderNotFound,  # Cancellation failed as the order is already canceled
                    '51402': OrderNotFound,  # Cancellation failed as the order is already completed
                    '51403': InvalidOrder,  # Cancellation failed as the order type does not support cancellation
                    '51404': InvalidOrder,  # Order cancellation unavailable during the second phase of call auction
                    '51405': ExchangeError,  # Cancellation failed as you do not have any pending orders
                    '51406': ExchangeError,  # Canceled - order count exceeds the limit {0}
                    '51407': BadRequest,  # Either order ID or client order ID is required
                    '51408': ExchangeError,  # Pair ID or name does not match the order info
                    '51409': ExchangeError,  # Either pair ID or pair name ID is required
                    '51410': ExchangeError,  # Cancellation failed as the order is already under cancelling status
                    '51500': ExchangeError,  # Either order price or amount is required
                    '51501': ExchangeError,  # Maximum {0} orders can be modified
                    '51502': InsufficientFunds,  # Order modification failed for insufficient margin
                    '51503': ExchangeError,  # Order modification failed as the order does not exist
                    '51506': ExchangeError,  # Order modification unavailable for the order type
                    '51508': ExchangeError,  # Orders are not allowed to be modified during the call auction
                    '51509': ExchangeError,  # Modification failed as the order has been canceled
                    '51510': ExchangeError,  # Modification failed as the order has been completed
                    '51511': ExchangeError,  # Modification failed as the order price did not meet the requirement for Post Only
                    '51600': ExchangeError,  # Status not found
                    '51601': ExchangeError,  # Order status and order ID cannot exist at the same time
                    '51602': ExchangeError,  # Either order status or order ID is required
                    '51603': OrderNotFound,  # Order does not exist
                    # Data class
                    '52000': ExchangeError,  # No updates
                    # SPOT/MARGIN error codes 54000-54999
                    '54000': ExchangeError,  # Margin transactions unavailable
                    '54001': ExchangeError,  # Only Multi-currency margin account can be set to borrow coins automatically
                    # FUNDING error codes 58000-58999
                    '58000': ExchangeError,  # Account type {0} does not supported when getting the sub-account balance
                    '58001': AuthenticationError,  # Incorrect trade password
                    '58002': PermissionDenied,  # Please activate Savings Account first
                    '58003': ExchangeError,  # Currency type is not supported by Savings Account
                    '58004': AccountSuspended,  # Account blocked(transfer & withdrawal endpoint: either end of the account does not authorize the transfer)
                    '58005': ExchangeError,  # The redeemed amount must be no greater than {0}
                    '58006': ExchangeError,  # Service unavailable for token {0}
                    '58007': ExchangeError,  # Abnormal Assets interface. Please try again later
                    '58100': ExchangeError,  # The trading product triggers risk control, and the platform has suspended the fund transfer-out function with related users. Please wait patiently
                    '58101': AccountSuspended,  # Transfer suspended(transfer endpoint: either end of the account does not authorize the transfer)
                    '58102': RateLimitExceeded,  # Too frequent transfer(transfer too frequently)
                    '58103': ExchangeError,  # Parent account user id does not match sub-account user id
                    '58104': ExchangeError,  # Since your P2P transaction is abnormal, you are restricted from making fund transfers. Please contact customer support to remove the restriction
                    '58105': ExchangeError,  # Since your P2P transaction is abnormal, you are restricted from making fund transfers. Please transfer funds on our website or app to complete identity verification
                    '58106': ExchangeError,  # Please enable the account for spot contract
                    '58107': ExchangeError,  # Please enable the account for futures contract
                    '58108': ExchangeError,  # Please enable the account for option contract
                    '58109': ExchangeError,  # Please enable the account for swap contract
                    '58110': ExchangeError,  # The contract triggers risk control, and the platform has suspended the fund transfer function of it. Please wait patiently
                    '58111': ExchangeError,  # Funds transfer unavailable as the perpetual contract is charging the funding fee. Please try again later
                    '58112': ExchangeError,  # Your fund transfer failed. Please try again later
                    '58114': ExchangeError,  # Transfer amount must be more than 0
                    '58115': ExchangeError,  # Sub-account does not exist
                    '58116': ExchangeError,  # Transfer amount exceeds the limit
                    '58117': ExchangeError,  # Account assets are abnormal, please deal with negative assets before transferring
                    '58200': ExchangeError,  # Withdrawal from {0} to {1} is unavailable for self currency
                    '58201': ExchangeError,  # Withdrawal amount exceeds the daily limit
                    '58202': ExchangeError,  # The minimum withdrawal amount for NEO is 1, and the amount must be an integer
                    '58203': InvalidAddress,  # Please add a withdrawal address
                    '58204': AccountSuspended,  # Withdrawal suspended
                    '58205': ExchangeError,  # Withdrawal amount exceeds the upper limit
                    '58206': ExchangeError,  # Withdrawal amount is lower than the lower limit
                    '58207': InvalidAddress,  # Withdrawal failed due to address error
                    '58208': ExchangeError,  # Withdrawal failed. Please link your email
                    '58209': ExchangeError,  # Withdrawal failed. Withdraw feature is not available for sub-accounts
                    '58210': ExchangeError,  # Withdrawal fee exceeds the upper limit
                    '58211': ExchangeError,  # Withdrawal fee is lower than the lower limit(withdrawal endpoint: incorrect fee)
                    '58212': ExchangeError,  # Withdrawal fee should be {0}% of the withdrawal amount
                    '58213': AuthenticationError,  # Please set trading password before withdrawal
                    '58300': ExchangeError,  # Deposit-address count exceeds the limit
                    '58350': InsufficientFunds,  # Insufficient balance
                    # Account error codes 59000-59999
                    '59000': ExchangeError,  # Your settings failed as you have positions or open orders
                    '59001': ExchangeError,  # Switching unavailable as you have borrowings
                    '59100': ExchangeError,  # You have open positions. Please cancel all open positions before changing the leverage
                    '59101': ExchangeError,  # You have pending orders with isolated positions. Please cancel all the pending orders and adjust the leverage
                    '59102': ExchangeError,  # Leverage exceeds the maximum leverage. Please adjust the leverage
                    '59103': InsufficientFunds,  # Leverage is too low and no sufficient margin in your account. Please adjust the leverage
                    '59104': ExchangeError,  # The leverage is too high. The borrowed position has exceeded the maximum position of self leverage. Please adjust the leverage
                    '59105': ExchangeError,  # Leverage can not be less than {0}. Please adjust the leverage
                    '59106': ExchangeError,  # The max available margin corresponding to your order tier is {0}. Please adjust your margin and place a new order
                    '59107': ExchangeError,  # You have pending orders under the service, please modify the leverage after canceling all pending orders
                    '59108': InsufficientFunds,  # Low leverage and insufficient margin, please adjust the leverage
                    '59109': ExchangeError,  # Account equity less than the required margin amount after adjustment. Please adjust the leverage
                    '59200': InsufficientFunds,  # Insufficient account balance
                    '59201': InsufficientFunds,  # Negative account balance
                    '59300': ExchangeError,  # Margin call failed. Position does not exist
                    '59301': ExchangeError,  # Margin adjustment failed for exceeding the max limit
                    '59401': ExchangeError,  # Holdings already reached the limit
                    '59500': ExchangeError,  # Only the APIKey of the main account has permission
                    '59501': ExchangeError,  # Only 50 APIKeys can be created per account
                    '59502': ExchangeError,  # Note name cannot be duplicate with the currently created APIKey note name
                    '59503': ExchangeError,  # Each APIKey can bind up to 20 IP addresses
                    '59504': ExchangeError,  # The sub account does not support the withdrawal function
                    '59505': ExchangeError,  # The passphrase format is incorrect
                    '59506': ExchangeError,  # APIKey does not exist
                    '59507': ExchangeError,  # The two accounts involved in a transfer must be two different sub accounts under the same parent account
                    '59508': AccountSuspended,  # The sub account of {0} is suspended
                    # WebSocket error Codes from 60000-63999
                    '60001': AuthenticationError,  # "OK_ACCESS_KEY" can not be empty
                    '60002': AuthenticationError,  # "OK_ACCESS_SIGN" can not be empty
                    '60003': AuthenticationError,  # "OK_ACCESS_PASSPHRASE" can not be empty
                    '60004': AuthenticationError,  # Invalid OK_ACCESS_TIMESTAMP
                    '60005': AuthenticationError,  # Invalid OK_ACCESS_KEY
                    '60006': InvalidNonce,  # Timestamp request expired
                    '60007': AuthenticationError,  # Invalid sign
                    '60008': AuthenticationError,  # Login is not supported for public channels
                    '60009': AuthenticationError,  # Login failed
                    '60010': AuthenticationError,  # Already logged in
                    '60011': AuthenticationError,  # Please log in
                    '60012': BadRequest,  # Illegal request
                    '60013': BadRequest,  # Invalid args
                    '60014': RateLimitExceeded,  # Requests too frequent
                    '60015': NetworkError,  # Connection closed as there was no data transmission in the last 30 seconds
                    '60016': ExchangeNotAvailable,  # Buffer is full, cannot write data
                    '60017': BadRequest,  # Invalid url path
                    '60018': BadRequest,  # The {0} {1} {2} {3} {4} does not exist
                    '60019': BadRequest,  # Invalid op {op}
                    '63999': ExchangeError,  # Internal system error
                },
                'broad': {
                },
            },
            'httpExceptions': {
                '429': ExchangeNotAvailable,  # https://github.com/ccxt/ccxt/issues/9612
            },
            'precisionMode': TICK_SIZE,
            'options': {
                'fetchOHLCV': {
                    'type': 'Candles',  # Candles or HistoryCandles, IndexCandles, MarkPriceCandles
                },
                'createMarketBuyOrderRequiresPrice': True,
                'fetchMarkets': ['spot', 'futures', 'swap', 'option'],  # spot, futures, swap, option
                'defaultType': 'spot',  # 'funding', 'spot', 'margin', 'futures', 'swap', 'option'
                'fetchBalance': {
                    'type': 'spot',  # 'funding', 'trading', 'spot'
                },
                'fetchLedger': {
                    'method': 'privateGetAccountBills',  # privateGetAccountBillsArchive, privateGetAssetBills
                },
                'brokerId': 'e847386590ce4dBC',
            },
            'commonCurrencies': {
                # OKEX refers to ERC20 version of Aeternity(AEToken)
                'AE': 'AET',  # https://github.com/ccxt/ccxt/issues/4981
                'BOX': 'DefiBox',
                'HOT': 'Hydro Protocol',
                'HSR': 'HC',
                'MAG': 'Maggie',
                'SBTC': 'Super Bitcoin',
                'YOYO': 'YOYOW',
                'WIN': 'WinToken',  # https://github.com/ccxt/ccxt/issues/5701
            },
        })

    async def fetch_time(self, params={}):
        response = await self.generalGetTime(params)
        #
        #     {
        #         "iso": "2015-01-07T23:47:25.201Z",
        #         "epoch": 1420674445.201
        #     }
        #
        return self.parse8601(self.safe_string(response, 'iso'))

    async def fetch_markets(self, params={}):
        types = self.safe_value(self.options, 'fetchMarkets')
        result = []
        for i in range(0, len(types)):
            markets = await self.fetch_markets_by_type(types[i], params)
            result = self.array_concat(result, markets)
        return result

    def parse_markets(self, markets):
        result = []
        for i in range(0, len(markets)):
            result.append(self.parse_market(markets[i]))
        return result

    def parse_market(self, market):
        #
        #     {
        #         "alias":"",  # self_week, next_week, quarter, next_quarter
        #         "baseCcy":"BTC",
        #         "category":"1",
        #         "ctMult":"",
        #         "ctType":"",  # inverse, linear
        #         "ctVal":"",
        #         "ctValCcy":"",
        #         "expTime":"",
        #         "instId":"BTC-USDT",  # BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
        #         "instType":"SPOT",  # SPOT, FUTURES, SWAP, OPTION
        #         "lever":"10",
        #         "listTime":"1548133413000",
        #         "lotSz":"0.00000001",
        #         "minSz":"0.00001",
        #         "optType":"",
        #         "quoteCcy":"USDT",
        #         "settleCcy":"",
        #         "state":"live",
        #         "stk":"",
        #         "tickSz":"0.1",
        #         "uly":""
        #     }
        #
        id = self.safe_string(market, 'instId')
        type = self.safe_string_lower(market, 'instType')
        spot = (type == 'spot')
        futures = (type == 'futures')
        swap = (type == 'swap')
        option = (type == 'option')
        baseId = self.safe_string(market, 'baseCcy')
        quoteId = self.safe_string(market, 'quoteCcy')
        underlying = self.safe_string(market, 'uly')
        if (underlying is not None) and not spot:
            parts = underlying.split('-')
            baseId = self.safe_string(parts, 0)
            quoteId = self.safe_string(parts, 1)
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        symbol = (base + '/' + quote) if spot else id
        tickSize = self.safe_string(market, 'tickSz')
        precision = {
            'amount': self.safe_number(market, 'lotSz'),
            'price': self.parse_number(tickSize),
        }
        minAmountString = self.safe_string(market, 'minSz')
        minAmount = self.parse_number(minAmountString)
        minCost = None
        if (minAmount is not None) and (tickSize is not None):
            minCost = self.parse_number(Precise.string_mul(tickSize, minAmountString))
        active = True
        fees = self.safe_value_2(self.fees, type, 'trading', {})
        return self.extend(fees, {
            'id': id,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'baseId': baseId,
            'quoteId': quoteId,
            'info': market,
            'type': type,
            'spot': spot,
            'futures': futures,
            'swap': swap,
            'option': option,
            'active': active,
            'precision': precision,
            'limits': {
                'amount': {
                    'min': minAmount,
                    'max': None,
                },
                'price': {
                    'min': precision['price'],
                    'max': None,
                },
                'cost': {
                    'min': minCost,
                    'max': None,
                },
            },
        })

    async def fetch_markets_by_type(self, type, params={}):
        uppercaseType = type.upper()
        request = {
            'instType': uppercaseType,
        }
        if uppercaseType == 'OPTION':
            defaultUnderlying = self.safe_value(self.options, 'defaultUnderlying', 'BTC-USD')
            currencyId = self.safe_string_2(params, 'uly', 'marketId', defaultUnderlying)
            if currencyId is None:
                raise ArgumentsRequired(self.id + ' fetchMarketsByType requires an underlying uly or marketId parameter for options markets')
            else:
                request['uly'] = currencyId
        response = await self.publicGetPublicInstruments(self.extend(request, params))
        #
        # spot, futures, swaps, options
        #
        #     {
        #         "code":"0",
        #         "data":[
        #             {
        #                 "alias":"",  # self_week, next_week, quarter, next_quarter
        #                 "baseCcy":"BTC",
        #                 "category":"1",
        #                 "ctMult":"",
        #                 "ctType":"",  # inverse, linear
        #                 "ctVal":"",
        #                 "ctValCcy":"",
        #                 "expTime":"",
        #                 "instId":"BTC-USDT",  # BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
        #                 "instType":"SPOT",  # SPOT, FUTURES, SWAP, OPTION
        #                 "lever":"10",
        #                 "listTime":"1548133413000",
        #                 "lotSz":"0.00000001",
        #                 "minSz":"0.00001",
        #                 "optType":"",
        #                 "quoteCcy":"USDT",
        #                 "settleCcy":"",
        #                 "state":"live",
        #                 "stk":"",
        #                 "tickSz":"0.1",
        #                 "uly":""
        #             }
        #         ],
        #         "msg":""
        #     }
        #
        data = self.safe_value(response, 'data', [])
        return self.parse_markets(data)

    async def fetch_currencies(self, params={}):
        # has['fetchCurrencies'] is currently set to False
        # despite that their docs say these endpoints are public:
        #     https://www.okex.com/api/account/v3/withdrawal/fee
        #     https://www.okex.com/api/account/v3/currencies
        # it will still reply with {"code":30001, "message": "OK-ACCESS-KEY header is required"}
        # if you attempt to access it without authentication
        response = await self.accountGetCurrencies(params)
        #
        #     [
        #         {
        #             name: '',
        #             currency: 'BTC',
        #             can_withdraw: '1',
        #             can_deposit: '1',
        #             min_withdrawal: '0.0100000000000000'
        #         },
        #     ]
        #
        result = {}
        for i in range(0, len(response)):
            currency = response[i]
            id = self.safe_string(currency, 'currency')
            code = self.safe_currency_code(id)
            precision = 0.00000001  # default precision, todo: fix "magic constants"
            name = self.safe_string(currency, 'name')
            canDeposit = self.safe_integer(currency, 'can_deposit')
            canWithdraw = self.safe_integer(currency, 'can_withdraw')
            active = True if (canDeposit and canWithdraw) else False
            result[code] = {
                'id': id,
                'code': code,
                'info': currency,
                'type': None,
                'name': name,
                'active': active,
                'fee': None,  # todo: redesign
                'precision': precision,
                'limits': {
                    'amount': {'min': None, 'max': None},
                    'withdraw': {
                        'min': self.safe_number(currency, 'min_withdrawal'),
                        'max': None,
                    },
                },
            }
        return result

    async def fetch_order_book(self, symbol, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        method = market['type'] + 'GetInstrumentsInstrumentId'
        method += 'Depth' if (market['type'] == 'swap') else 'Book'
        request = {
            'instrument_id': market['id'],
        }
        if limit is not None:
            request['size'] = limit  # max 200
        response = await getattr(self, method)(self.extend(request, params))
        #
        # spot
        #
        #     {     asks: [["0.02685268", "0.242571", "1"],
        #                    ["0.02685493", "0.164085", "1"],
        #                    ...
        #                    ["0.02779", "1.039", "1"],
        #                    ["0.027813", "0.0876", "1"]        ],
        #            bids: [["0.02684052", "10.371849", "1"],
        #                    ["0.02684051", "3.707", "4"],
        #                    ...
        #                    ["0.02634963", "0.132934", "1"],
        #                    ["0.02634962", "0.264838", "2"]    ],
        #       timestamp:   "2018-12-17T20:24:16.159Z"            }
        #
        # swap
        #
        #     {
        #         "asks":[
        #             ["916.21","94","0","1"]
        #         ],
        #         "bids":[
        #             ["916.1","15","0","1"]
        #         ],
        #         "time":"2021-04-16T02:04:48.282Z"
        #     }
        #
        timestamp = self.parse8601(self.safe_string_2(response, 'timestamp', 'time'))
        return self.parse_order_book(response, symbol, timestamp)

    def parse_ticker(self, ticker, market=None):
        #
        #     {        best_ask: "0.02665472",
        #               best_bid: "0.02665221",
        #          instrument_id: "ETH-BTC",
        #             product_id: "ETH-BTC",
        #                   last: "0.02665472",
        #                    ask: "0.02665472",  # missing in the docs
        #                    bid: "0.02665221",  # not mentioned in the docs
        #               open_24h: "0.02645482",
        #               high_24h: "0.02714633",
        #                low_24h: "0.02614109",
        #        base_volume_24h: "572298.901923",
        #              timestamp: "2018-12-17T21:20:07.856Z",
        #       quote_volume_24h: "15094.86831261"            }
        #
        timestamp = self.parse8601(self.safe_string(ticker, 'timestamp'))
        symbol = None
        marketId = self.safe_string(ticker, 'instrument_id')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            symbol = market['symbol']
        elif marketId is not None:
            parts = marketId.split('-')
            numParts = len(parts)
            if numParts == 2:
                baseId, quoteId = parts
                base = self.safe_currency_code(baseId)
                quote = self.safe_currency_code(quoteId)
                symbol = base + '/' + quote
            else:
                symbol = marketId
        if (symbol is None) and (market is not None):
            symbol = market['symbol']
        last = self.safe_number(ticker, 'last')
        open = self.safe_number(ticker, 'open_24h')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_number(ticker, 'high_24h'),
            'low': self.safe_number(ticker, 'low_24h'),
            'bid': self.safe_number(ticker, 'best_bid'),
            'bidVolume': self.safe_number(ticker, 'best_bid_size'),
            'ask': self.safe_number(ticker, 'best_ask'),
            'askVolume': self.safe_number(ticker, 'best_ask_size'),
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_number(ticker, 'base_volume_24h'),
            'quoteVolume': self.safe_number(ticker, 'quote_volume_24h'),
            'info': ticker,
        }

    async def fetch_ticker(self, symbol, params={}):
        await self.load_markets()
        market = self.market(symbol)
        method = market['type'] + 'GetInstrumentsInstrumentIdTicker'
        request = {
            'instrument_id': market['id'],
        }
        response = await getattr(self, method)(self.extend(request, params))
        #
        #     {        best_ask: "0.02665472",
        #               best_bid: "0.02665221",
        #          instrument_id: "ETH-BTC",
        #             product_id: "ETH-BTC",
        #                   last: "0.02665472",
        #                    ask: "0.02665472",
        #                    bid: "0.02665221",
        #               open_24h: "0.02645482",
        #               high_24h: "0.02714633",
        #                low_24h: "0.02614109",
        #        base_volume_24h: "572298.901923",
        #              timestamp: "2018-12-17T21:20:07.856Z",
        #       quote_volume_24h: "15094.86831261"            }
        #
        return self.parse_ticker(response)

    async def fetch_tickers_by_type(self, type, symbols=None, params={}):
        await self.load_markets()
        method = type + 'GetInstrumentsTicker'
        response = await getattr(self, method)(params)
        result = {}
        for i in range(0, len(response)):
            ticker = self.parse_ticker(response[i])
            symbol = ticker['symbol']
            result[symbol] = ticker
        return self.filter_by_array(result, 'symbol', symbols)

    async def fetch_tickers(self, symbols=None, params={}):
        defaultType = self.safe_string_2(self.options, 'fetchTickers', 'defaultType')
        type = self.safe_string(params, 'type', defaultType)
        return await self.fetch_tickers_by_type(type, symbols, self.omit(params, 'type'))

    def parse_trade(self, trade, market=None):
        #
        # fetchTrades(public)
        #
        #     spot trades
        #
        #         {
        #             time: "2018-12-17T23:31:08.268Z",
        #             timestamp: "2018-12-17T23:31:08.268Z",
        #             trade_id: "409687906",
        #             price: "0.02677805",
        #             size: "0.923467",
        #             side: "sell"
        #         }
        #
        #     futures trades, swap trades
        #
        #         {
        #             trade_id: "1989230840021013",
        #             side: "buy",
        #             price: "92.42",
        #             qty: "184",  # missing in swap markets
        #             size: "5",  # missing in futures markets
        #             timestamp: "2018-12-17T23:26:04.613Z"
        #         }
        #
        # fetchOrderTrades(private)
        #
        #     spot trades, margin trades
        #
        #         {
        #             "created_at":"2019-03-15T02:52:56.000Z",
        #             "exec_type":"T",  # whether the order is taker or maker
        #             "fee":"0.00000082",
        #             "instrument_id":"BTC-USDT",
        #             "ledger_id":"3963052721",
        #             "liquidity":"T",  # whether the order is taker or maker
        #             "order_id":"2482659399697408",
        #             "price":"3888.6",
        #             "product_id":"BTC-USDT",
        #             "side":"buy",
        #             "size":"0.00055306",
        #             "timestamp":"2019-03-15T02:52:56.000Z"
        #         },
        #
        #     futures trades, swap trades
        #
        #         {
        #             "trade_id":"197429674631450625",
        #             "instrument_id":"EOS-USD-SWAP",
        #             "order_id":"6a-7-54d663a28-0",
        #             "price":"3.633",
        #             "order_qty":"1.0000",
        #             "fee":"-0.000551",
        #             "created_at":"2019-03-21T04:41:58.0Z",  # missing in swap trades
        #             "timestamp":"2019-03-25T05:56:31.287Z",  # missing in futures trades
        #             "exec_type":"M",  # whether the order is taker or maker
        #             "side":"short",  # "buy" in futures trades
        #         }
        #
        id = self.safe_string(trade, 'tradeId')
        marketId = self.safe_string(trade, 'instId')
        market = self.safe_market(marketId, market, '-')
        symbol = market['symbol']
        timestamp = self.safe_integer(trade, 'ts')
        priceString = self.safe_string_2(trade, 'fillPx', 'px')
        amountString = self.safe_string_2(trade, 'fillSz', 'sz')
        price = self.parse_number(priceString)
        amount = self.parse_number(amountString)
        cost = self.parse_number(Precise.string_mul(priceString, amountString))
        side = self.safe_string(trade, 'side')
        orderId = self.safe_string(trade, 'ordId')
        feeCostString = self.safe_string(trade, 'fee')
        fee = None
        if feeCostString is not None:
            feeCostSigned = Precise.string_neg(feeCostString)
            feeCurrencyId = self.safe_string(trade, 'feeCcy')
            feeCurrencyCode = self.safe_currency_code(feeCurrencyId)
            fee = {
                'cost': self.parse_number(feeCostSigned),
                'currency': feeCurrencyCode,
            }
        takerOrMaker = self.safe_string(trade, 'execType')
        if takerOrMaker == 'T':
            takerOrMaker = 'taker'
        elif takerOrMaker == 'M':
            takerOrMaker = 'maker'
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': orderId,
            'type': None,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }

    async def fetch_trades(self, symbol, since=None, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        method = market['type'] + 'GetInstrumentsInstrumentIdTrades'
        if (limit is None) or (limit > 100):
            limit = 100  # maximum = default = 100
        request = {
            'instrument_id': market['id'],
            'limit': limit,
            # from: 'id',
            # to: 'id',
        }
        response = await getattr(self, method)(self.extend(request, params))
        #
        # spot markets
        #
        #     [
        #         {
        #             time: "2018-12-17T23:31:08.268Z",
        #             timestamp: "2018-12-17T23:31:08.268Z",
        #             trade_id: "409687906",
        #             price: "0.02677805",
        #             size: "0.923467",
        #             side: "sell"
        #         }
        #     ]
        #
        # futures markets, swap markets
        #
        #     [
        #         {
        #             trade_id: "1989230840021013",
        #             side: "buy",
        #             price: "92.42",
        #             qty: "184",  # missing in swap markets
        #             size: "5",  # missing in futures markets
        #             timestamp: "2018-12-17T23:26:04.613Z"
        #         }
        #     ]
        #
        return self.parse_trades(response, market, since, limit)

    def parse_ohlcv(self, ohlcv, market=None):
        #
        # spot markets
        #
        #     {
        #         close: "0.02684545",
        #         high: "0.02685084",
        #         low: "0.02683312",
        #         open: "0.02683894",
        #         time: "2018-12-17T20:28:00.000Z",
        #         volume: "101.457222"
        #     }
        #
        # futures markets
        #
        #     [
        #         1545072720000,
        #         0.3159,
        #         0.3161,
        #         0.3144,
        #         0.3149,
        #         22886,
        #         725179.26172331,
        #     ]
        #
        if isinstance(ohlcv, list):
            numElements = len(ohlcv)
            volumeIndex = 6 if (numElements > 6) else 5
            timestamp = self.safe_value(ohlcv, 0)
            if isinstance(timestamp, basestring):
                timestamp = self.parse8601(timestamp)
            return [
                timestamp,  # timestamp
                self.safe_number(ohlcv, 1),            # Open
                self.safe_number(ohlcv, 2),            # High
                self.safe_number(ohlcv, 3),            # Low
                self.safe_number(ohlcv, 4),            # Close
                # self.safe_number(ohlcv, 5),         # Quote Volume
                # self.safe_number(ohlcv, 6),         # Base Volume
                self.safe_number(ohlcv, volumeIndex),  # Volume, okex will return base volume in the 7th element for future markets
            ]
        else:
            return [
                self.parse8601(self.safe_string(ohlcv, 'time')),
                self.safe_number(ohlcv, 'open'),    # Open
                self.safe_number(ohlcv, 'high'),    # High
                self.safe_number(ohlcv, 'low'),     # Low
                self.safe_number(ohlcv, 'close'),   # Close
                self.safe_number(ohlcv, 'volume'),  # Base Volume
            ]

    async def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        duration = self.parse_timeframe(timeframe)
        request = {
            'instrument_id': market['id'],
            'granularity': self.timeframes[timeframe],
        }
        options = self.safe_value(self.options, 'fetchOHLCV', {})
        defaultType = self.safe_string(options, 'type', 'Candles')  # Candles or HistoryCandles
        type = self.safe_string(params, 'type', defaultType)
        params = self.omit(params, 'type')
        method = market['type'] + 'GetInstrumentsInstrumentId' + type
        if type == 'Candles':
            if since is not None:
                if limit is not None:
                    request['end'] = self.iso8601(self.sum(since, limit * duration * 1000))
                request['start'] = self.iso8601(since)
            else:
                if limit is not None:
                    now = self.milliseconds()
                    request['start'] = self.iso8601(now - limit * duration * 1000)
                    request['end'] = self.iso8601(now)
        elif type == 'HistoryCandles':
            if market['option']:
                raise NotSupported(self.id + ' fetchOHLCV does not have ' + type + ' for ' + market['type'] + ' markets')
            if since is not None:
                if limit is None:
                    limit = 300  # default
                request['start'] = self.iso8601(self.sum(since, limit * duration * 1000))
                request['end'] = self.iso8601(since)
            else:
                if limit is not None:
                    now = self.milliseconds()
                    request['end'] = self.iso8601(now - limit * duration * 1000)
                    request['start'] = self.iso8601(now)
        response = await getattr(self, method)(self.extend(request, params))
        #
        # spot markets
        #
        #     [
        #         {
        #             close: "0.02683401",
        #             high: "0.02683401",
        #             low: "0.02683401",
        #             open: "0.02683401",
        #             time: "2018-12-17T23:47:00.000Z",
        #             volume: "0"
        #         },
        #         {
        #             close: "0.02684545",
        #             high: "0.02685084",
        #             low: "0.02683312",
        #             open: "0.02683894",
        #             time: "2018-12-17T20:28:00.000Z",
        #             volume: "101.457222"
        #         }
        #     ]
        #
        # futures
        #
        #     [
        #         [
        #             1545090660000,
        #             0.3171,
        #             0.3174,
        #             0.3171,
        #             0.3173,
        #             1648,
        #             51930.38579450868
        #         ],
        #         [
        #             1545072720000,
        #             0.3159,
        #             0.3161,
        #             0.3144,
        #             0.3149,
        #             22886,
        #             725179.26172331
        #         ]
        #     ]
        #
        return self.parse_ohlcvs(response, market, timeframe, since, limit)

    def parse_account_balance(self, response):
        #
        # account
        #
        #     [
        #         {
        #             balance:  0,
        #             available:  0,
        #             currency: "BTC",
        #             hold:  0
        #         },
        #         {
        #             balance:  0,
        #             available:  0,
        #             currency: "ETH",
        #             hold:  0
        #         }
        #     ]
        #
        # spot
        #
        #     [
        #         {
        #             frozen: "0",
        #             hold: "0",
        #             id: "2149632",
        #             currency: "BTC",
        #             balance: "0.0000000497717339",
        #             available: "0.0000000497717339",
        #             holds: "0"
        #         },
        #         {
        #             frozen: "0",
        #             hold: "0",
        #             id: "2149632",
        #             currency: "ICN",
        #             balance: "0.00000000925",
        #             available: "0.00000000925",
        #             holds: "0"
        #         }
        #     ]
        #
        result = {
            'info': response,
            'timestamp': None,
            'datetime': None,
        }
        for i in range(0, len(response)):
            balance = response[i]
            currencyId = self.safe_string(balance, 'currency')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['total'] = self.safe_number(balance, 'balance')
            account['used'] = self.safe_number(balance, 'hold')
            account['free'] = self.safe_number(balance, 'available')
            result[code] = account
        return self.parse_balance(result)

    def parse_margin_balance(self, response):
        #
        #     [
        #         {
        #             "currency:BTC": {
        #                 "available":"0",
        #                 "balance":"0",
        #                 "borrowed":"0",
        #                 "can_withdraw":"0",
        #                 "frozen":"0",
        #                 "hold":"0",
        #                 "holds":"0",
        #                 "lending_fee":"0"
        #             },
        #             "currency:USDT": {
        #                 "available":"100",
        #                 "balance":"100",
        #                 "borrowed":"0",
        #                 "can_withdraw":"100",
        #                 "frozen":"0",
        #                 "hold":"0",
        #                 "holds":"0",
        #                 "lending_fee":"0"
        #             },
        #             "instrument_id":"BTC-USDT",
        #             "liquidation_price":"0",
        #             "product_id":"BTC-USDT",
        #             "risk_rate":""
        #         },
        #     ]
        #
        result = {
            'info': response,
            'timestamp': None,
            'datetime': None,
        }
        for i in range(0, len(response)):
            balance = response[i]
            marketId = self.safe_string(balance, 'instrument_id')
            market = self.safe_value(self.markets_by_id, marketId)
            symbol = None
            if market is None:
                baseId, quoteId = marketId.split('-')
                base = self.safe_currency_code(baseId)
                quote = self.safe_currency_code(quoteId)
                symbol = base + '/' + quote
            else:
                symbol = market['symbol']
            omittedBalance = self.omit(balance, [
                'instrument_id',
                'liquidation_price',
                'product_id',
                'risk_rate',
                'margin_ratio',
                'maint_margin_ratio',
                'tiers',
            ])
            keys = list(omittedBalance.keys())
            accounts = {}
            for k in range(0, len(keys)):
                key = keys[k]
                marketBalance = balance[key]
                if key.find(':') >= 0:
                    parts = key.split(':')
                    currencyId = parts[1]
                    code = self.safe_currency_code(currencyId)
                    account = self.account()
                    account['total'] = self.safe_number(marketBalance, 'balance')
                    account['used'] = self.safe_number(marketBalance, 'hold')
                    account['free'] = self.safe_number(marketBalance, 'available')
                    accounts[code] = account
                else:
                    raise NotSupported(self.id + ' margin balance response format has changed!')
            result[symbol] = self.parse_balance(accounts, False)
        return result

    def parse_futures_balance(self, response):
        #
        #     {
        #         "info":{
        #             "eos":{
        #                 "auto_margin":"0",
        #                 "contracts": [
        #                     {
        #                         "available_qty":"40.37069445",
        #                         "fixed_balance":"0",
        #                         "instrument_id":"EOS-USD-190329",
        #                         "margin_for_unfilled":"0",
        #                         "margin_frozen":"0",
        #                         "realized_pnl":"0",
        #                         "unrealized_pnl":"0"
        #                     },
        #                     {
        #                         "available_qty":"40.37069445",
        #                         "fixed_balance":"14.54895721",
        #                         "instrument_id":"EOS-USD-190628",
        #                         "margin_for_unfilled":"0",
        #                         "margin_frozen":"10.64042157",
        #                         "realized_pnl":"-3.90853564",
        #                         "unrealized_pnl":"-0.259"
        #                     },
        #                 ],
        #                 "equity":"50.75220665",
        #                 "margin_mode":"fixed",
        #                 "total_avail_balance":"40.37069445"
        #             },
        #         }
        #     }
        #
        # their root field name is "info", so our info will contain their info
        result = {
            'info': response,
            'timestamp': None,
            'datetime': None,
        }
        info = self.safe_value(response, 'info', {})
        ids = list(info.keys())
        for i in range(0, len(ids)):
            id = ids[i]
            code = self.safe_currency_code(id)
            balance = self.safe_value(info, id, {})
            account = self.account()
            totalAvailBalance = self.safe_number(balance, 'total_avail_balance')
            if self.safe_string(balance, 'margin_mode') == 'fixed':
                contracts = self.safe_value(balance, 'contracts', [])
                free = totalAvailBalance
                for i in range(0, len(contracts)):
                    contract = contracts[i]
                    fixedBalance = self.safe_number(contract, 'fixed_balance')
                    realizedPnl = self.safe_number(contract, 'realized_pnl')
                    marginFrozen = self.safe_number(contract, 'margin_frozen')
                    marginForUnfilled = self.safe_number(contract, 'margin_for_unfilled')
                    margin = self.sum(fixedBalance, realizedPnl) - marginFrozen - marginForUnfilled
                    free = self.sum(free, margin)
                account['free'] = free
            else:
                realizedPnl = self.safe_number(balance, 'realized_pnl')
                unrealizedPnl = self.safe_number(balance, 'unrealized_pnl')
                marginFrozen = self.safe_number(balance, 'margin_frozen')
                marginForUnfilled = self.safe_number(balance, 'margin_for_unfilled')
                account['free'] = self.sum(totalAvailBalance, realizedPnl, unrealizedPnl) - marginFrozen - marginForUnfilled
            # it may be incorrect to use total, free and used for swap accounts
            account['total'] = self.safe_number(balance, 'equity')
            result[code] = account
        return self.parse_balance(result, False)

    def parse_swap_balance(self, response):
        #
        #     {
        #         "info": [
        #             {
        #                 "equity":"3.0139",
        #                 "fixed_balance":"0.0000",
        #                 "instrument_id":"EOS-USD-SWAP",
        #                 "margin":"0.5523",
        #                 "margin_frozen":"0.0000",
        #                 "margin_mode":"crossed",
        #                 "margin_ratio":"1.0913",
        #                 "realized_pnl":"-0.0006",
        #                 "timestamp":"2019-03-25T03:46:10.336Z",
        #                 "total_avail_balance":"3.0000",
        #                 "unrealized_pnl":"0.0145"
        #             }
        #         ]
        #     }
        #
        # their root field name is "info", so our info will contain their info
        result = {'info': response}
        timestamp = None
        info = self.safe_value(response, 'info', [])
        for i in range(0, len(info)):
            balance = info[i]
            marketId = self.safe_string(balance, 'instrument_id')
            symbol = marketId
            if marketId in self.markets_by_id:
                symbol = self.markets_by_id[marketId]['symbol']
            balanceTimestamp = self.parse8601(self.safe_string(balance, 'timestamp'))
            timestamp = balanceTimestamp if (timestamp is None) else max(timestamp, balanceTimestamp)
            account = self.account()
            # it may be incorrect to use total, free and used for swap accounts
            account['total'] = self.safe_number(balance, 'equity')
            account['free'] = self.safe_number(balance, 'total_avail_balance')
            result[symbol] = account
        result['timestamp'] = timestamp
        result['datetime'] = self.iso8601(timestamp)
        return self.parse_balance(result, False)

    def parse_trading_balance(self, response):
        result = {'info': response}
        data = self.safe_value(response, 'data', [])
        first = self.safe_value(data, 0, {})
        timestamp = self.safe_integer(first, 'uTime')
        details = self.safe_value(first, 'details', [])
        for i in range(0, len(details)):
            balance = details[i]
            currencyId = self.safe_string(balance, 'ccy')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            # it may be incorrect to use total, free and used for swap accounts
            eq = self.safe_string(balance, 'eq')
            availEq = self.safe_string(balance, 'availEq')
            if (len(eq) < 1) or (len(availEq) < 1):
                account['free'] = self.safe_string(balance, 'availBal')
                account['used'] = self.safe_string(balance, 'frozenBal')
            else:
                account['total'] = eq
                account['free'] = availEq
            result[code] = account
        result['timestamp'] = timestamp
        result['datetime'] = self.iso8601(timestamp)
        return self.parse_balance(result, False)

    async def fetch_balance(self, params={}):
        await self.load_markets()
        request = {
            # 'ccy': 'BTC,ETH',  # comma-separated list of currency ids
        }
        response = await self.privateGetAccountBalance(self.extend(request, params))
        #
        #     {
        #         "code":"0",
        #         "data":[
        #             {
        #                 "adjEq":"",
        #                 "details":[
        #                     {
        #                         "availBal":"",
        #                         "availEq":"28.21006347",
        #                         "cashBal":"28.21006347",
        #                         "ccy":"USDT",
        #                         "crossLiab":"",
        #                         "disEq":"28.2687404020176",
        #                         "eq":"28.21006347",
        #                         "eqUsd":"28.2687404020176",
        #                         "frozenBal":"0",
        #                         "interest":"",
        #                         "isoEq":"0",
        #                         "isoLiab":"",
        #                         "liab":"",
        #                         "maxLoan":"",
        #                         "mgnRatio":"",
        #                         "notionalLever":"0",
        #                         "ordFrozen":"0",
        #                         "twap":"0",
        #                         "uTime":"1621556539861",
        #                         "upl":"0",
        #                         "uplLiab":""
        #                     }
        #                 ],
        #                 "imr":"",
        #                 "isoEq":"0",
        #                 "mgnRatio":"",
        #                 "mmr":"",
        #                 "notionalUsd":"",
        #                 "ordFroz":"",
        #                 "totalEq":"28.2687404020176",
        #                 "uTime":"1621556553510"
        #             }
        #         ],
        #         "msg":""
        #     }
        #
        #     {
        #         "code":"0",
        #         "data":[
        #             {
        #                 "adjEq":"",
        #                 "details":[
        #                     {
        #                         "availBal":"0.049",
        #                         "availEq":"",
        #                         "cashBal":"0.049",
        #                         "ccy":"BTC",
        #                         "crossLiab":"",
        #                         "disEq":"1918.55678",
        #                         "eq":"0.049",
        #                         "eqUsd":"1918.55678",
        #                         "frozenBal":"0",
        #                         "interest":"",
        #                         "isoEq":"",
        #                         "isoLiab":"",
        #                         "liab":"",
        #                         "maxLoan":"",
        #                         "mgnRatio":"",
        #                         "notionalLever":"",
        #                         "ordFrozen":"0",
        #                         "twap":"0",
        #                         "uTime":"1621973128591",
        #                         "upl":"",
        #                         "uplLiab":""
        #                     }
        #                 ],
        #                 "imr":"",
        #                 "isoEq":"",
        #                 "mgnRatio":"",
        #                 "mmr":"",
        #                 "notionalUsd":"",
        #                 "ordFroz":"",
        #                 "totalEq":"1918.55678",
        #                 "uTime":"1622045126908"
        #             }
        #         ],
        #         "msg":""
        #     }
        #
        result = {'info': response}
        data = self.safe_value(response, 'data', [])
        first = self.safe_value(data, 0, {})
        timestamp = self.safe_integer(first, 'uTime')
        details = self.safe_value(first, 'details', [])
        for i in range(0, len(details)):
            balance = details[i]
            currencyId = self.safe_string(balance, 'ccy')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            # it may be incorrect to use total, free and used for swap accounts
            eq = self.safe_string(balance, 'eq')
            availEq = self.safe_string(balance, 'availEq')
            if (len(eq) < 1) or (len(availEq) < 1):
                account['free'] = self.safe_string(balance, 'availBal')
                account['used'] = self.safe_string(balance, 'frozenBal')
            else:
                account['total'] = eq
                account['free'] = availEq
            result[code] = account
        result['timestamp'] = timestamp
        result['datetime'] = self.iso8601(timestamp)
        return self.parse_balance(result, False)

    # async def fetch_balance(self, params={}):
    #     defaultType = self.safe_string_2(self.options, 'fetchBalance', 'defaultType')
    #     type = self.safe_string(params, 'type', defaultType)
    #     if type is None:
    #         raise ArgumentsRequired(self.id + " fetchBalance() requires a type parameter(one of 'account', 'spot', 'margin', 'futures', 'swap')")
    #     await self.load_markets()
    #     suffix = 'Wallet' if (type == 'account') else 'Accounts'
    #     method = type + 'Get' + suffix
    #     query = self.omit(params, 'type')
    #     response = await getattr(self, method)(query)
    #     #
    #     # account
    #     #
    #     #     [
    #     #         {
    #     #             balance:  0,
    #     #             available:  0,
    #     #             currency: "BTC",
    #     #             hold:  0
    #     #         },
    #     #         {
    #     #             balance:  0,
    #     #             available:  0,
    #     #             currency: "ETH",
    #     #             hold:  0
    #     #         }
    #     #     ]
    #     #
    #     # spot
    #     #
    #     #     [
    #     #         {
    #     #             frozen: "0",
    #     #             hold: "0",
    #     #             id: "2149632",
    #     #             currency: "BTC",
    #     #             balance: "0.0000000497717339",
    #     #             available: "0.0000000497717339",
    #     #             holds: "0"
    #     #         },
    #     #         {
    #     #             frozen: "0",
    #     #             hold: "0",
    #     #             id: "2149632",
    #     #             currency: "ICN",
    #     #             balance: "0.00000000925",
    #     #             available: "0.00000000925",
    #     #             holds: "0"
    #     #         }
    #     #     ]
    #     #
    #     # margin
    #     #
    #     #     [
    #     #         {
    #     #             "currency:BTC": {
    #     #                 "available":"0",
    #     #                 "balance":"0",
    #     #                 "borrowed":"0",
    #     #                 "can_withdraw":"0",
    #     #                 "frozen":"0",
    #     #                 "hold":"0",
    #     #                 "holds":"0",
    #     #                 "lending_fee":"0"
    #     #             },
    #     #             "currency:USDT": {
    #     #                 "available":"100",
    #     #                 "balance":"100",
    #     #                 "borrowed":"0",
    #     #                 "can_withdraw":"100",
    #     #                 "frozen":"0",
    #     #                 "hold":"0",
    #     #                 "holds":"0",
    #     #                 "lending_fee":"0"
    #     #             },
    #     #             "instrument_id":"BTC-USDT",
    #     #             "liquidation_price":"0",
    #     #             "product_id":"BTC-USDT",
    #     #             "risk_rate":""
    #     #         },
    #     #     ]
    #     #
    #     # futures
    #     #
    #     #     {
    #     #         "info":{
    #     #             "eos":{
    #     #                 "auto_margin":"0",
    #     #                 "contracts": [
    #     #                     {
    #     #                         "available_qty":"40.37069445",
    #     #                         "fixed_balance":"0",
    #     #                         "instrument_id":"EOS-USD-190329",
    #     #                         "margin_for_unfilled":"0",
    #     #                         "margin_frozen":"0",
    #     #                         "realized_pnl":"0",
    #     #                         "unrealized_pnl":"0"
    #     #                     },
    #     #                     {
    #     #                         "available_qty":"40.37069445",
    #     #                         "fixed_balance":"14.54895721",
    #     #                         "instrument_id":"EOS-USD-190628",
    #     #                         "margin_for_unfilled":"0",
    #     #                         "margin_frozen":"10.64042157",
    #     #                         "realized_pnl":"-3.90853564",
    #     #                         "unrealized_pnl":"-0.259"
    #     #                     },
    #     #                 ],
    #     #                 "equity":"50.75220665",
    #     #                 "margin_mode":"fixed",
    #     #                 "total_avail_balance":"40.37069445"
    #     #             },
    #     #         }
    #     #     }
    #     #
    #     # swap
    #     #
    #     #     {
    #     #         "info": [
    #     #             {
    #     #                 "equity":"3.0139",
    #     #                 "fixed_balance":"0.0000",
    #     #                 "instrument_id":"EOS-USD-SWAP",
    #     #                 "margin":"0.5523",
    #     #                 "margin_frozen":"0.0000",
    #     #                 "margin_mode":"crossed",
    #     #                 "margin_ratio":"1.0913",
    #     #                 "realized_pnl":"-0.0006",
    #     #                 "timestamp":"2019-03-25T03:46:10.336Z",
    #     #                 "total_avail_balance":"3.0000",
    #     #                 "unrealized_pnl":"0.0145"
    #     #             }
    #     #         ]
    #     #     }
    #     #
    #     return self.parse_balance_by_type(type, response)

    def parse_balance_by_type(self, type, response):
        if (type == 'account') or (type == 'spot'):
            return self.parse_account_balance(response)
        elif type == 'margin':
            return self.parse_margin_balance(response)
        elif type == 'futures':
            return self.parse_futures_balance(response)
        elif type == 'swap':
            return self.parse_swap_balance(response)
        raise NotSupported(self.id + " fetchBalance does not support the '" + type + "' type(the type must be one of 'account', 'spot', 'margin', 'futures', 'swap')")

    async def create_order(self, symbol, type, side, amount, price=None, params={}):
        await self.load_markets()
        market = self.market(symbol)

        # TEALSTREET
        reduceOnly = self.safe_value(params, 'reduceOnly', False)
        timeInForce = self.api_time_in_force(params['timeInForce'])
        orderType = self.api_order_type(type)
        if orderType not in ['conditional', 'trigger']: # no stop post only
            if timeInForce in ['post_only', 'fok', 'ioc']:
                orderType = timeInForce
        # workingType = self.api_trigger_type(params['trigger']) # only for stops - contract and mark
        closeOnTrigger = self.safe_value(params, 'closeOnTrigger', False)
        side = side.lower()

        method = 'privatePostTradeOrder'
        if type in ['stop', 'stoplimit']:
            method = 'privatePostTradeOrderAlgo'

        request = {
            'instId': market['id'],
            #
            #     Simple:
            #     - SPOT and OPTION buyer: cash
            #
            #     Single-currency margin:
            #     - Isolated MARGIN: isolated
            #     - Cross MARGIN: cross
            #     - Cross SPOT: cash
            #     - Cross FUTURES/SWAP/OPTION: cross
            #     - Isolated FUTURES/SWAP/OPTION: isolated
            #
            #     Multi-currency margin:
            #     - Isolated MARGIN: isolated
            #     - Cross SPOT: cross
            #     - Cross FUTURES/SWAP/OPTION: cross
            #     - Isolated FUTURES/SWAP/OPTION: isolated
            #
            'tdMode': 'cross',  # cash, cross, isolated
            # 'ccy': currency['id'],  # only applicable to cross MARGIN orders in single-currency margin
            # 'clOrdId': clientOrderId,  # up to 32 characters, must be unique
            # 'tag': tag,  # up to 8 characters
            #
            #     In long/short mode, side and posSide need to be combined
            #
            #     buy with long means open long
            #     sell with long means close long
            #     sell with short means open short
            #     buy with short means close short
            #
            'side': side,
            # 'posSide': 'long',  # long, short,  # required in the long/short mode, and can only be long or short
            'ordType': orderType,  # market, limit, post_only, fok, ioc
            #
            #     for SPOT/MARGIN bought and sold at a limit price, sz refers to the amount of trading currency
            #     for SPOT/MARGIN bought at a market price, sz refers to the amount of quoted currency
            #     for SPOT/MARGIN sold at a market price, sz refers to the amount of trading currency
            #     for FUTURES/SWAP/OPTION buying and selling, sz refers to the number of contracts
            #
            # 'sz': self.amount_to_precision(symbol, amount),
            # 'px': self.price_to_precision(symbol, price),  # limit orders only
            'reduceOnly': reduceOnly,  # MARGIN orders only
        }
        clientOrderId = self.safe_string_2(params, 'clOrdId', 'clientOrderId')
        if clientOrderId is None:
            brokerId = self.safe_string(self.options, 'brokerId')
            if brokerId is not None:
                request['clOrdId'] = brokerId + self.uuid16()
        else:
            request['clOrdId'] = clientOrderId
            params = self.omit(params, ['clOrdId', 'clientOrderId'])
        # if type == 'market':
        #     # for market buy it requires the amount of quote currency to spend
        #     price = basePrice
        #     if side == 'buy':
        #         notional = self.safe_number(params, 'sz')
        #         createMarketBuyOrderRequiresPrice = self.safe_value(self.options, 'createMarketBuyOrderRequiresPrice', True)
        #         if createMarketBuyOrderRequiresPrice:
        #             if price is not None:
        #                 if notional is None:
        #                     notional = amount * price
        #             elif notional is None:
        #                 raise InvalidOrder(
        #                     self.id + " createOrder() requires the price argument with market buy orders to calculate total order cost(amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = False and supply the total cost value in the 'amount' argument or in the 'sz' extra parameter(the exchange-specific behaviour)")
        #         else:
        #             notional = amount if (notional is None) else notional
        #         precision = market['precision']['amount']
        #         request['sz'] = self.decimal_to_precision(notional, TRUNCATE, precision, self.precisionMode)
        #     else:
        #         request['sz'] = self.amount_to_precision(symbol, amount)
        # else:
        if price is not None:
            request['px'] = self.price_to_precision(symbol, price)
        request['sz'] = self.amount_to_precision(symbol, amount)

        if orderType in ['conditional', 'trigger']:
            # request = self.omit(request, 'px')
            stopPrice = self.safe_number(params, 'stopPrice')

            if price is None: # market
                price = -1
            else: # if there's a price, they say conditional
                orderType = 'conditional'
                request['ordType'] = orderType

            basePrice = self.safe_value(params, 'basePrice')
            if not basePrice:
                ticker = self.fetch_ticker(symbol)
                basePrice = ticker['last']

            # if (side == 'BUY' and stopPrice < basePrice) or (side == 'SELL' and stopPrice > basePrice):
            #     if type == 'STOP_MARKET':
            #         uppercaseType = 'TAKE_PROFIT_MARKET'
            #     elif uppercaseType == 'STOP':
            #         uppercaseType = 'TAKE_PROFIT'
            # if (side == 'BUY' and stopPrice < basePrice) or (side == 'SELL' and stopPrice > basePrice):
            if side == 'sell':
                if stopPrice > basePrice:
                    request['tpTriggerPx'] = self.price_to_precision(symbol, stopPrice)
                    request['tpOrdPx'] = self.price_to_precision(symbol, price)
                else:
                    request['slTriggerPx'] = self.price_to_precision(symbol, stopPrice)
                    request['slOrdPx'] = self.price_to_precision(symbol, price)
            else:
                if stopPrice < basePrice:
                    request['tpTriggerPx'] = self.price_to_precision(symbol, stopPrice)
                    request['tpOrdPx'] = self.price_to_precision(symbol, price)
                else:
                    request['slTriggerPx'] = self.price_to_precision(symbol, stopPrice)
                    request['slOrdPx'] = self.price_to_precision(symbol, price)

            request['triggerPx'] = self.price_to_precision(symbol, stopPrice)
            request['orderPx'] =  self.price_to_precision(symbol, price)

        params = []
        response = getattr(self, method)(self.extend(request, params))
        #
        #     {
        #         "code": "0",
        #         "msg": "",
        #         "data": [
        #             {
        #                 "clOrdId": "oktswap6",
        #                 "ordId": "312269865356374016",
        #                 "tag": "",
        #                 "sCode": "0",
        #                 "sMsg": ""
        #             }
        #         ]
        #     }
        #
        data = self.safe_value(response, 'data', [])
        first = self.safe_value(data, 0)
        order = self.parse_order(first, market)

        if order['status'] is None: # TEALSTREET
            sCode = self.safe_string(first, 'sCode')
            order['status'] = 'open' if sCode == '0' else None

        return self.extend(order, {
            'type': type,
            'side': side,
        })

    async def cancel_order(self, id, symbol=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'instId': market['id'],
            # 'ordId': id,  # either ordId or clOrdId is required
            # 'clOrdId': clientOrderId,
        }
        type = self.safe_string(params, 'type')
        clientOrderId = self.safe_string_2(params, 'clOrdId', 'clientOrderId')
        if clientOrderId is not None:
            request['clOrdId'] = clientOrderId
        else:
            if type == 'stop':
                request['algoId'] = id
            else:
                request['ordId'] = id

        method = 'privatePostTradeCancelOrder'
        if type == 'stop':
            method = 'privatePostTradeCancelAlgos'

        query = self.omit(params, ['clOrdId', 'clientOrderId', 'type'])

        if type == 'stop':
            response = getattr(self, method)([self.extend(request, query)])
        else:
            response = getattr(self, method)(self.extend(request, query))
        # {"code":"0","data":[{"clOrdId":"","ordId":"317251910906576896","sCode":"0","sMsg":""}],"msg":""}
        data = self.safe_value(response, 'data', [])
        order = self.safe_value(data, 0)
        parsed_order = self.parse_order(order, market)

        if parsed_order['status'] is None: # algo order, # TEALSTREET
            sCode = self.safe_string(order, 'sCode')
            parsed_order['status'] = 'cancelled' if sCode == '0' else None

        return parsed_order

    def parse_order_status(self, status):
        statuses = {
            'canceled': 'canceled',
            'live': 'open',
            'partially_filled': 'open',
            'filled': 'closed',
        }
        return self.safe_string(statuses, status, status)

    def parse_order_side(self, side):
        sides = {
            '1': 'buy',  # open long
            '2': 'sell',  # open short
            '3': 'sell',  # close long
            '4': 'buy',  # close short
        }
        return self.safe_string(sides, side, side)

    def parse_order(self, order, market=None):
        #
        # createOrder
        #
        #     {
        #         "clOrdId": "oktswap6",
        #         "ordId": "312269865356374016",
        #         "tag": "",
        #         "sCode": "0",
        #         "sMsg": ""
        #     }
        #
        # fetchOrder, fetchOpenOrders
        #
        #     {
        #         "accFillSz":"0",
        #         "avgPx":"",
        #         "cTime":"1621910749815",
        #         "category":"normal",
        #         "ccy":"",
        #         "clOrdId":"",
        #         "fee":"0",
        #         "feeCcy":"ETH",
        #         "fillPx":"",
        #         "fillSz":"0",
        #         "fillTime":"",
        #         "instId":"ETH-USDT",
        #         "instType":"SPOT",
        #         "lever":"",
        #         "ordId":"317251910906576896",
        #         "ordType":"limit",
        #         "pnl":"0",
        #         "posSide":"net",
        #         "px":"2000",
        #         "rebate":"0",
        #         "rebateCcy":"USDT",
        #         "side":"buy",
        #         "slOrdPx":"",
        #         "slTriggerPx":"",
        #         "state":"live",
        #         "sz":"0.001",
        #         "tag":"",
        #         "tdMode":"cash",
        #         "tpOrdPx":"",
        #         "tpTriggerPx":"",
        #         "tradeId":"",
        #         "uTime":"1621910749815"
        #     }
        #
        # algo order
        # {
        #     "actualPx": "",
        #     "actualSide": "",
        #     "actualSz": "0",
        #     "algoId": "339146702171021312",
        #     "cTime": "1627130874838",
        #     "ccy": "",
        #     "instId": "TRX-USD-210806",
        #     "instType": "FUTURES",
        #     "lever": "10",
        #     "ordId": "0",
        #     "ordPx": "",
        #     "ordType": "conditional",
        #     "posSide": "net",
        #     "side": "sell",
        #     "slOrdPx": "-1",
        #     "slTriggerPx": "0.055",
        #     "state": "live",
        #     "sz": "1",
        #     "tdMode": "cross",
        #     "tgtCcy": "",
        #     "tpOrdPx": "",
        #     "tpTriggerPx": "",
        #     "triggerPx": "",
        #     "triggerTime": ""
        # }
        #
        # oco
        # {
        #     "actualPx": "",
        #     "actualSide": "",
        #     "actualSz": "0",
        #     "algoId": "339180839963598848",
        #     "cTime": "1627139013923",
        #     "ccy": "",
        #     "instId": "TRX-USD-210806",
        #     "instType": "FUTURES",
        #     "lever": "10",
        #     "ordId": "0",
        #     "ordPx": "",
        #     "ordType": "oco",
        #     "posSide": "net",
        #     "side": "sell",
        #     "slOrdPx": "-1",
        #     "slTriggerPx": "0.05",
        #     "state": "live",
        #     "sz": "1",
        #     "tdMode": "cross",
        #     "tgtCcy": "",
        #     "tpOrdPx": "-1",
        #     "tpTriggerPx": "0.06",
        #     "triggerPx": "",
        #     "triggerTime": ""
        # }
        # TEALSTREET TODO: make sure OCO is parsed correctly
        id = self.safe_string(order, 'ordId')
        if id == '0' or not id:
            id = self.safe_string(order, 'algoId')
        timestamp = self.safe_integer(order, 'cTime')
        lastTradeTimestamp = self.safe_integer(order, 'fillTime')
        side = self.safe_string(order, 'side')
        type = self.safe_string(order, 'ordType')
        postOnly = False
        timeInForce = None
        if type == 'post_only':
            postOnly = True
            type = 'limit'
        elif type == 'fok':
            timeInForce = 'FOK'
            type = 'limit'
        elif type == 'ioc':
            timeInForce = 'IOC'
            type = 'limit'
        elif type in ['conditional', 'oco', 'trigger']:
            # type = 'limit' if price else 'market'
            type = 'stop'
        price = self.safe_number(order, 'px') or self.safe_number(order, 'ordPx') or self.safe_number(order, 'tpOrdPx') or self.safe_number(order, 'slOrdPx')
        stopPrice = self.safe_number(order, 'triggerPx') or self.safe_number(order, 'tpTriggerPx') or self.safe_number(order, 'slTriggerPx')
        price = None if price == -1 else price
        marketId = self.safe_string(order, 'instId')
        symbol = self.safe_symbol(marketId, market, '-')
        filled = self.safe_number(order, 'accFillSz')
        average = self.safe_number(order, 'avgPx')
        status = self.parse_order_status(self.safe_string(order, 'state'))
        feeCostString = self.safe_string(order, 'fee')
        amount = self.safe_number(order, 'sz')
        cost = None
        if side == 'buy' and type == 'market':
            cost = self.safe_number(order, 'sz')
        fee = None
        if feeCostString is not None:
            feeCostSigned = Precise.string_neg(feeCostString)
            feeCurrencyId = self.safe_string(order, 'feeCcy')
            feeCurrencyCode = self.safe_currency_code(feeCurrencyId)
            fee = {
                'cost': self.parse_number(feeCostSigned),
                'currency': feeCurrencyCode,
            }
        clientOrderId = self.safe_string(order, 'clOrdId')
        if (clientOrderId is not None) and (len(clientOrderId) < 1):
            clientOrderId = None  # fix empty clientOrderId string
        reduce = self.safe_value(order, 'reduceOnly')
        close = self.safe_value(order, 'closeOnTrigger')
        return self.safe_order({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': None,
            'status': status,
            'fee': fee,
            'trades': None,
            'reduce': reduce, # TEALSTREET
            'close' : close, # TEALSTREET
        })

    async def fetch_order(self, id, symbol=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrder() requires a symbol argument')
        await self.load_markets()
        market = self.market(symbol)
        defaultType = self.safe_string_2(self.options, 'fetchOrder', 'defaultType', market['type'])
        type = self.safe_string(params, 'type', defaultType)
        if type is None:
            raise ArgumentsRequired(self.id + " fetchOrder() requires a type parameter(one of 'spot', 'margin', 'futures', 'swap').")
        instrumentId = 'InstrumentId' if (market['futures'] or market['swap']) else ''
        method = type + 'GetOrders' + instrumentId
        request = {
            'instrument_id': market['id'],
            # 'client_oid': 'abcdef12345',  # optional, [a-z0-9]{1,32}
            # 'order_id': id,
        }
        clientOid = self.safe_string(params, 'client_oid')
        if clientOid is not None:
            method += 'ClientOid'
            request['client_oid'] = clientOid
        else:
            method += 'OrderId'
            request['order_id'] = id
        query = self.omit(params, 'type')
        response = await getattr(self, method)(self.extend(request, query))
        #
        # spot, margin
        #
        #     {
        #         "client_oid":"oktspot70",
        #         "created_at":"2019-03-15T02:52:56.000Z",
        #         "filled_notional":"3.8886",
        #         "filled_size":"0.001",
        #         "funds":"",
        #         "instrument_id":"BTC-USDT",
        #         "notional":"",
        #         "order_id":"2482659399697408",
        #         "order_type":"0",
        #         "price":"3927.3",
        #         "product_id":"BTC-USDT",
        #         "side":"buy",
        #         "size":"0.001",
        #         "status":"filled",
        #         "state": "2",
        #         "timestamp":"2019-03-15T02:52:56.000Z",
        #         "type":"limit"
        #     }
        #
        # futures, swap
        #
        #     {
        #         "instrument_id":"EOS-USD-190628",
        #         "size":"10",
        #         "timestamp":"2019-03-20T02:46:38.000Z",
        #         "filled_qty":"10",
        #         "fee":"-0.0080819",
        #         "order_id":"2510946213248000",
        #         "price":"3.712",
        #         "price_avg":"3.712",
        #         "status":"2",
        #         "state": "2",
        #         "type":"2",
        #         "contract_val":"10",
        #         "leverage":"10",
        #         "client_oid":"",  # missing in swap orders
        #         "pnl":"0",  # missing in swap orders
        #         "order_type":"0"
        #     }
        #
        return self.parse_order(response)

    async def fetch_orders_by_state(self, state, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            # raise ArgumentsRequired(self.id + ' fetchOrdersByState() requires a symbol argument')
            market = self.market(symbol)
        await self.load_markets()
        market = self.market(symbol)
        type = None
        if market['futures'] or market['swap']:
            type = market['type']
        else:
            defaultType = self.safe_string_2(self.options, 'fetchOrder', 'defaultType', market['type'])
            type = self.safe_string(params, 'type', defaultType)
        if type is None:
            raise ArgumentsRequired(self.id + " fetchOrdersByState() requires a type parameter(one of 'spot', 'margin', 'futures', 'swap').")
        request = {
            'instrument_id': market['id'],
            # '-2': failed,
            # '-1': cancelled,
            #  '0': open ,
            #  '1': partially filled,
            #  '2': fully filled,
            #  '3': submitting,
            #  '4': cancelling,
            #  '6': incomplete（open+partially filled),
            #  '7': complete（cancelled+fully filled),
            'state': state,
        }
        method = type + 'GetOrders'
        if market['futures'] or market['swap']:
            method += 'InstrumentId'
        query = self.omit(params, 'type')
        response = await getattr(self, method)(self.extend(request, query))
        #
        # spot, margin
        #
        #     [
        #         # in fact, self documented API response does not correspond
        #         # to their actual API response for spot markets
        #         # OKEX v3 API returns a plain array of orders(see below)
        #         [
        #             {
        #                 "client_oid":"oktspot76",
        #                 "created_at":"2019-03-18T07:26:49.000Z",
        #                 "filled_notional":"3.9734",
        #                 "filled_size":"0.001",
        #                 "funds":"",
        #                 "instrument_id":"BTC-USDT",
        #                 "notional":"",
        #                 "order_id":"2500723297813504",
        #                 "order_type":"0",
        #                 "price":"4013",
        #                 "product_id":"BTC-USDT",
        #                 "side":"buy",
        #                 "size":"0.001",
        #                 "status":"filled",
        #                 "state": "2",
        #                 "timestamp":"2019-03-18T07:26:49.000Z",
        #                 "type":"limit"
        #             },
        #         ],
        #         {
        #             "before":"2500723297813504",
        #             "after":"2500650881647616"
        #         }
        #     ]
        #
        # futures, swap
        #
        #     {
        #         "result":true,  # missing in swap orders
        #         "order_info": [
        #             {
        #                 "instrument_id":"EOS-USD-190628",
        #                 "size":"10",
        #                 "timestamp":"2019-03-20T10:04:55.000Z",
        #                 "filled_qty":"10",
        #                 "fee":"-0.00841043",
        #                 "order_id":"2512669605501952",
        #                 "price":"3.668",
        #                 "price_avg":"3.567",
        #                 "status":"2",
        #                 "state": "2",
        #                 "type":"4",
        #                 "contract_val":"10",
        #                 "leverage":"10",  # missing in swap orders
        #                 "client_oid":"",
        #                 "pnl":"1.09510794",  # missing in swap orders
        #                 "order_type":"0"
        #             },
        #         ]
        #     }
        #
        orders = None
        if market['swap'] or market['futures']:
            orders = self.safe_value(response, 'order_info', [])
        else:
            orders = response
            responseLength = len(response)
            if responseLength < 1:
                return []
            # in fact, self documented API response does not correspond
            # to their actual API response for spot markets
            # OKEX v3 API returns a plain array of orders
            if responseLength > 1:
                before = self.safe_value(response[1], 'before')
                if before is not None:
                    orders = response[0]
        return self.parse_orders(orders, market, since, limit)

    # async def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
    #     # '-2': failed,
    #     # '-1': cancelled,
    #     #  '0': open ,
    #     #  '1': partially filled,
    #     #  '2': fully filled,
    #     #  '3': submitting,
    #     #  '4': cancelling,
    #     #  '6': incomplete（open+partially filled),
    #     #  '7': complete（cancelled+fully filled),
    #     return await self.fetch_orders_by_state('6', symbol, since, limit, params)

    async def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        await self.load_markets()
        request = {
            # 'instType': 'SPOT',  # SPOT, MARGIN, SWAP, FUTURES, OPTION
            # 'uly': currency['id'],
            # 'instId': market['id'],
            # 'ordType': 'limit',  # market, limit, post_only, fok, ioc, comma-separated
            # 'state': 'live',  # live, partially_filled
            # 'after': orderId,
            # 'before': orderId,
            # 'limit': limit,  # default 100, max 100
        }
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['instId'] = market['id']
        if limit is not None:
            request['limit'] = limit  # default 100, max 100 # TODO: make sure
        type = self.safe_value(params, 'type')
        if type in ['conditional', 'oco', 'trigger']:
            request['ordType'] = type
            response = await self.privateGetTradeOrdersAlgoPending(self.extend(request, params))
        else:
            response = await self.privateGetTradeOrdersPending(self.extend(request, params))
        #
        #     {
        #         "code":"0",
        #         "data":[
        #             {
        #                 "accFillSz":"0",
        #                 "avgPx":"",
        #                 "cTime":"1621910749815",
        #                 "category":"normal",
        #                 "ccy":"",
        #                 "clOrdId":"",
        #                 "fee":"0",
        #                 "feeCcy":"ETH",
        #                 "fillPx":"",
        #                 "fillSz":"0",
        #                 "fillTime":"",
        #                 "instId":"ETH-USDT",
        #                 "instType":"SPOT",
        #                 "lever":"",
        #                 "ordId":"317251910906576896",
        #                 "ordType":"limit",
        #                 "pnl":"0",
        #                 "posSide":"net",
        #                 "px":"2000",
        #                 "rebate":"0",
        #                 "rebateCcy":"USDT",
        #                 "side":"buy",
        #                 "slOrdPx":"",
        #                 "slTriggerPx":"",
        #                 "state":"live",
        #                 "sz":"0.001",
        #                 "tag":"",
        #                 "tdMode":"cash",
        #                 "tpOrdPx":"",
        #                 "tpTriggerPx":"",
        #                 "tradeId":"",
        #                 "uTime":"1621910749815"
        #             }
        #         ],
        #         "msg":""
        #     }
        #
        data = self.safe_value(response, 'data', [])
        return self.parse_orders(data, market, since, limit)

    async def fetch_closed_orders(self, symbol=None, since=None, limit=None, params={}):
        # '-2': failed,
        # '-1': cancelled,
        #  '0': open ,
        #  '1': partially filled,
        #  '2': fully filled,
        #  '3': submitting,
        #  '4': cancelling,
        #  '6': incomplete（open+partially filled),
        #  '7': complete（cancelled+fully filled),
        return await self.fetch_orders_by_state('7', symbol, since, limit, params)

    def parse_deposit_address(self, depositAddress, currency=None):
        #
        #     {
        #         address: '0x696abb81974a8793352cbd33aadcf78eda3cfdfa',
        #         currency: 'eth'
        #         tag: 'abcde12345',  # will be missing if the token does not require a deposit tag
        #         payment_id: 'abcde12345',  # will not be returned if the token does not require a payment_id
        #         # can_deposit: 1,  # 0 or 1, documented but missing
        #         # can_withdraw: 1,  # 0 or 1, documented but missing
        #     }
        #
        address = self.safe_string(depositAddress, 'address')
        tag = self.safe_string_2(depositAddress, 'tag', 'payment_id')
        tag = self.safe_string_2(depositAddress, 'memo', 'Memo', tag)
        currencyId = self.safe_string(depositAddress, 'currency')
        code = self.safe_currency_code(currencyId)
        self.check_address(address)
        return {
            'currency': code,
            'address': address,
            'tag': tag,
            'info': depositAddress,
        }

    async def fetch_deposit_address(self, code, params={}):
        await self.load_markets()
        parts = code.split('-')
        currency = self.currency(parts[0])
        request = {
            'currency': currency['id'],
        }
        response = await self.accountGetDepositAddress(self.extend(request, params))
        #
        #     [
        #         {
        #             address: '0x696abb81974a8793352cbd33aadcf78eda3cfdfa',
        #             currency: 'eth'
        #         }
        #     ]
        #
        addressesByCode = self.parse_deposit_addresses(response)
        address = self.safe_value(addressesByCode, code)
        if address is None:
            raise InvalidAddress(self.id + ' fetchDepositAddress cannot return nonexistent addresses, you should create withdrawal addresses with the exchange website first')
        return address

    async def withdraw(self, code, amount, address, tag=None, params={}):
        self.check_address(address)
        await self.load_markets()
        currency = self.currency(code)
        if tag:
            address = address + ':' + tag
        fee = self.safe_string(params, 'fee')
        if fee is None:
            raise ArgumentsRequired(self.id + " withdraw() requires a `fee` string parameter, network transaction fee must be ≥ 0. Withdrawals to OKCoin or OKEx are fee-free, please set '0'. Withdrawing to external digital asset address requires network transaction fee.")
        request = {
            'currency': currency['id'],
            'to_address': address,
            'destination': '4',  # 2 = OKCoin International, 3 = OKEx 4 = others
            'amount': self.number_to_string(amount),
            'fee': fee,  # String. Network transaction fee ≥ 0. Withdrawals to OKCoin or OKEx are fee-free, please set as 0. Withdrawal to external digital asset address requires network transaction fee.
        }
        if 'password' in params:
            request['trade_pwd'] = params['password']
        elif 'trade_pwd' in params:
            request['trade_pwd'] = params['trade_pwd']
        elif self.password:
            request['trade_pwd'] = self.password
        query = self.omit(params, ['fee', 'password', 'trade_pwd'])
        if not ('trade_pwd' in request):
            raise ExchangeError(self.id + ' withdraw() requires self.password set on the exchange instance or a password / trade_pwd parameter')
        response = await self.accountPostWithdrawal(self.extend(request, query))
        #
        #     {
        #         "amount":"0.1",
        #         "withdrawal_id":"67485",
        #         "currency":"btc",
        #         "result":true
        #     }
        #
        return {
            'info': response,
            'id': self.safe_string(response, 'withdrawal_id'),
        }

    async def fetch_deposits(self, code=None, since=None, limit=None, params={}):
        await self.load_markets()
        request = {}
        method = 'accountGetDepositHistory'
        currency = None
        if code is not None:
            currency = self.currency(code)
            request['currency'] = currency['id']
            method += 'Currency'
        response = await getattr(self, method)(self.extend(request, params))
        return self.parse_transactions(response, currency, since, limit, params)

    async def fetch_withdrawals(self, code=None, since=None, limit=None, params={}):
        await self.load_markets()
        request = {}
        method = 'accountGetWithdrawalHistory'
        currency = None
        if code is not None:
            currency = self.currency(code)
            request['currency'] = currency['id']
            method += 'Currency'
        response = await getattr(self, method)(self.extend(request, params))
        return self.parse_transactions(response, currency, since, limit, params)

    def parse_transaction_status(self, status):
        #
        # deposit statuses
        #
        #     {
        #         '0': 'waiting for confirmation',
        #         '1': 'confirmation account',
        #         '2': 'recharge success'
        #     }
        #
        # withdrawal statues
        #
        #     {
        #        '-3': 'pending cancel',
        #        '-2': 'cancelled',
        #        '-1': 'failed',
        #         '0': 'pending',
        #         '1': 'sending',
        #         '2': 'sent',
        #         '3': 'email confirmation',
        #         '4': 'manual confirmation',
        #         '5': 'awaiting identity confirmation'
        #     }
        #
        statuses = {
            '-3': 'pending',
            '-2': 'canceled',
            '-1': 'failed',
            '0': 'pending',
            '1': 'pending',
            '2': 'ok',
            '3': 'pending',
            '4': 'pending',
            '5': 'pending',
        }
        return self.safe_string(statuses, status, status)

    def parse_transaction(self, transaction, currency=None):
        #
        # withdraw
        #
        #     {
        #         "amount":"0.1",
        #         "withdrawal_id":"67485",
        #         "currency":"btc",
        #         "result":true
        #     }
        #
        # fetchWithdrawals
        #
        #     {
        #         amount: "4.72100000",
        #         withdrawal_id: "1729116",
        #         fee: "0.01000000eth",
        #         txid: "0xf653125bbf090bcfe4b5e8e7b8f586a9d87aa7de94598702758c0802b…",
        #         currency: "ETH",
        #         from: "7147338839",
        #         to: "0x26a3CB49578F07000575405a57888681249c35Fd",
        #         timestamp: "2018-08-17T07:03:42.000Z",
        #         status: "2"
        #     }
        #
        # fetchDeposits
        #
        #     {
        #         "amount": "4.19511659",
        #         "txid": "14c9a8c925647cdb7e5b2937ea9aefe2b29b2c273150ad3f44b3b8a4635ed437",
        #         "currency": "XMR",
        #         "from": "",
        #         "to": "48PjH3ksv1fiXniKvKvyH5UtFs5WhfS2Vf7U3TwzdRJtCc7HJWvCQe56dRahyhQyTAViXZ8Nzk4gQg6o4BJBMUoxNy8y8g7",
        #         "tag": "1234567",
        #         "deposit_id": 11571659, <-- we can use self
        #         "timestamp": "2019-10-01T14:54:19.000Z",
        #         "status": "2"
        #     }
        #
        type = None
        id = None
        address = None
        withdrawalId = self.safe_string(transaction, 'withdrawal_id')
        addressFrom = self.safe_string(transaction, 'from')
        addressTo = self.safe_string(transaction, 'to')
        tagTo = self.safe_string(transaction, 'tag')
        if withdrawalId is not None:
            type = 'withdrawal'
            id = withdrawalId
            address = addressTo
        else:
            # the payment_id will appear on new deposits but appears to be removed from the response after 2 months
            id = self.safe_string_2(transaction, 'payment_id', 'deposit_id')
            type = 'deposit'
            address = addressTo
        currencyId = self.safe_string(transaction, 'currency')
        code = self.safe_currency_code(currencyId)
        amount = self.safe_number(transaction, 'amount')
        status = self.parse_transaction_status(self.safe_string(transaction, 'status'))
        txid = self.safe_string(transaction, 'txid')
        timestamp = self.parse8601(self.safe_string(transaction, 'timestamp'))
        feeCost = None
        if type == 'deposit':
            feeCost = 0
        else:
            if currencyId is not None:
                feeWithCurrencyId = self.safe_string(transaction, 'fee')
                if feeWithCurrencyId is not None:
                    # https://github.com/ccxt/ccxt/pull/5748
                    lowercaseCurrencyId = currencyId.lower()
                    feeWithoutCurrencyId = feeWithCurrencyId.replace(lowercaseCurrencyId, '')
                    feeCost = float(feeWithoutCurrencyId)
        # todo parse tags
        return {
            'info': transaction,
            'id': id,
            'currency': code,
            'amount': amount,
            'addressFrom': addressFrom,
            'addressTo': addressTo,
            'address': address,
            'tagFrom': None,
            'tagTo': tagTo,
            'tag': tagTo,
            'status': status,
            'type': type,
            'updated': None,
            'txid': txid,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'fee': {
                'currency': code,
                'cost': feeCost,
            },
        }

    def parse_my_trade(self, pair, market=None):
        # check that trading symbols match in both entries
        userTrade = self.safe_value(pair, 1)
        otherTrade = self.safe_value(pair, 0)
        firstMarketId = self.safe_string(otherTrade, 'instrument_id')
        secondMarketId = self.safe_string(userTrade, 'instrument_id')
        if firstMarketId != secondMarketId:
            raise NotSupported(self.id + ' parseMyTrade() received unrecognized response format, differing instrument_ids in one fill, the exchange API might have changed, paste your verbose output: https://github.com/ccxt/ccxt/wiki/FAQ#what-is-required-to-get-help')
        marketId = firstMarketId
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        quoteId = market['quoteId']
        side = None
        amount = None
        cost = None
        receivedCurrencyId = self.safe_string(userTrade, 'currency')
        feeCurrencyId = None
        if receivedCurrencyId == quoteId:
            side = self.safe_string(otherTrade, 'side')
            amount = self.safe_number(otherTrade, 'size')
            cost = self.safe_number(userTrade, 'size')
            feeCurrencyId = self.safe_string(otherTrade, 'currency')
        else:
            side = self.safe_string(userTrade, 'side')
            amount = self.safe_number(userTrade, 'size')
            cost = self.safe_number(otherTrade, 'size')
            feeCurrencyId = self.safe_string(userTrade, 'currency')
        id = self.safe_string(userTrade, 'trade_id')
        price = self.safe_number(userTrade, 'price')
        feeCostFirst = self.safe_number(otherTrade, 'fee')
        feeCostSecond = self.safe_number(userTrade, 'fee')
        feeCurrencyCodeFirst = self.safe_currency_code(self.safe_string(otherTrade, 'currency'))
        feeCurrencyCodeSecond = self.safe_currency_code(self.safe_string(userTrade, 'currency'))
        fee = None
        fees = None
        # fee is either a positive number(invitation rebate)
        # or a negative number(transaction fee deduction)
        # therefore we need to invert the fee
        # more about it https://github.com/ccxt/ccxt/issues/5909
        if (feeCostFirst is not None) and (feeCostFirst != 0):
            if (feeCostSecond is not None) and (feeCostSecond != 0):
                fees = [
                    {
                        'cost': -feeCostFirst,
                        'currency': feeCurrencyCodeFirst,
                    },
                    {
                        'cost': -feeCostSecond,
                        'currency': feeCurrencyCodeSecond,
                    },
                ]
            else:
                fee = {
                    'cost': -feeCostFirst,
                    'currency': feeCurrencyCodeFirst,
                }
        elif (feeCostSecond is not None) and (feeCostSecond != 0):
            fee = {
                'cost': -feeCostSecond,
                'currency': feeCurrencyCodeSecond,
            }
        else:
            fee = {
                'cost': 0,
                'currency': self.safe_currency_code(feeCurrencyId),
            }
        #
        # simplified structures to show the underlying semantics
        #
        #     # market/limit sell
        #
        #     {
        #         "currency":"USDT",
        #         "fee":"-0.04647925",  # ←--- fee in received quote currency
        #         "price":"129.13",  # ←------ price
        #         "size":"30.98616393",  # ←-- cost
        #     },
        #     {
        #         "currency":"ETH",
        #         "fee":"0",
        #         "price":"129.13",
        #         "size":"0.23996099",  # ←--- amount
        #     },
        #
        #     # market/limit buy
        #
        #     {
        #         "currency":"ETH",
        #         "fee":"-0.00036049",  # ←--- fee in received base currency
        #         "price":"129.16",  # ←------ price
        #         "size":"0.240322",  # ←----- amount
        #     },
        #     {
        #         "currency":"USDT",
        #         "fee":"0",
        #         "price":"129.16",
        #         "size":"31.03998952",  # ←-- cost
        #     }
        #
        timestamp = self.parse8601(self.safe_string_2(userTrade, 'timestamp', 'created_at'))
        takerOrMaker = self.safe_string_2(userTrade, 'exec_type', 'liquidity')
        if takerOrMaker == 'M':
            takerOrMaker = 'maker'
        elif takerOrMaker == 'T':
            takerOrMaker = 'taker'
        orderId = self.safe_string(userTrade, 'order_id')
        result = {
            'info': pair,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'id': id,
            'order': orderId,
            'type': None,
            'takerOrMaker': takerOrMaker,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }
        if fees is not None:
            result['fees'] = fees
        return result

    def parse_my_trades(self, trades, market=None, since=None, limit=None, params={}):
        grouped = self.group_by(trades, 'trade_id')
        tradeIds = list(grouped.keys())
        result = []
        for i in range(0, len(tradeIds)):
            tradeId = tradeIds[i]
            pair = grouped[tradeId]
            # make sure it has exactly 2 trades, no more, no less
            numTradesInPair = len(pair)
            if numTradesInPair == 2:
                trade = self.parse_my_trade(pair)
                result.append(trade)
        symbol = None
        if market is not None:
            symbol = market['symbol']
        return self.filter_by_symbol_since_limit(result, symbol, since, limit)

    async def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        # okex actually returns ledger entries instead of fills here, so each fill in the order
        # is represented by two trades with opposite buy/sell sides, not one :\
        # self aspect renders the 'fills' endpoint unusable for fetchOrderTrades
        # until either OKEX fixes the API or we workaround self on our side somehow
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchMyTrades() requires a symbol argument')
        await self.load_markets()
        market = self.market(symbol)
        if (limit is not None) and (limit > 100):
            limit = 100
        request = {
            'instrument_id': market['id'],
            # 'order_id': id,  # string
            # 'after': '1',  # pagination of data to return records earlier than the requested ledger_id
            # 'before': '1',  # P=pagination of data to return records newer than the requested ledger_id
            # 'limit': limit,  # optional, number of results per request, default = maximum = 100
        }
        defaultType = self.safe_string_2(self.options, 'fetchMyTrades', 'defaultType')
        type = self.safe_string(params, 'type', defaultType)
        query = self.omit(params, 'type')
        method = type + 'GetFills'
        response = await getattr(self, method)(self.extend(request, query))
        #
        #     [
        #         # sell
        #         {
        #             "created_at":"2020-03-29T11:55:25.000Z",
        #             "currency":"USDT",
        #             "exec_type":"T",
        #             "fee":"-0.04647925",
        #             "instrument_id":"ETH-USDT",
        #             "ledger_id":"10562924353",
        #             "liquidity":"T",
        #             "order_id":"4636470489136128",
        #             "price":"129.13",
        #             "product_id":"ETH-USDT",
        #             "side":"buy",
        #             "size":"30.98616393",
        #             "timestamp":"2020-03-29T11:55:25.000Z",
        #             "trade_id":"18551601"
        #         },
        #         {
        #             "created_at":"2020-03-29T11:55:25.000Z",
        #             "currency":"ETH",
        #             "exec_type":"T",
        #             "fee":"0",
        #             "instrument_id":"ETH-USDT",
        #             "ledger_id":"10562924352",
        #             "liquidity":"T",
        #             "order_id":"4636470489136128",
        #             "price":"129.13",
        #             "product_id":"ETH-USDT",
        #             "side":"sell",
        #             "size":"0.23996099",
        #             "timestamp":"2020-03-29T11:55:25.000Z",
        #             "trade_id":"18551601"
        #         },
        #         # buy
        #         {
        #             "created_at":"2020-03-29T11:55:16.000Z",
        #             "currency":"ETH",
        #             "exec_type":"T",
        #             "fee":"-0.00036049",
        #             "instrument_id":"ETH-USDT",
        #             "ledger_id":"10562922669",
        #             "liquidity":"T",
        #             "order_id": "4636469894136832",
        #             "price":"129.16",
        #             "product_id":"ETH-USDT",
        #             "side":"buy",
        #             "size":"0.240322",
        #             "timestamp":"2020-03-29T11:55:16.000Z",
        #             "trade_id":"18551600"
        #         },
        #         {
        #             "created_at":"2020-03-29T11:55:16.000Z",
        #             "currency":"USDT",
        #             "exec_type":"T",
        #             "fee":"0",
        #             "instrument_id":"ETH-USDT",
        #             "ledger_id":"10562922668",
        #             "liquidity":"T",
        #             "order_id":"4636469894136832",
        #             "price":"129.16",
        #             "product_id":"ETH-USDT",
        #             "side":"sell",
        #             "size":"31.03998952",
        #             "timestamp":"2020-03-29T11:55:16.000Z",
        #             "trade_id":"18551600"
        #         }
        #     ]
        #
        return self.parse_my_trades(response, market, since, limit, params)

    async def fetch_order_trades(self, id, symbol=None, since=None, limit=None, params={}):
        request = {
            # 'instrument_id': market['id'],
            'order_id': id,
            # 'after': '1',  # return the page after the specified page number
            # 'before': '1',  # return the page before the specified page number
            # 'limit': limit,  # optional, number of results per request, default = maximum = 100
        }
        return await self.fetch_my_trades(symbol, since, limit, self.extend(request, params))

    async def fetch_position(self, symbol, params={}):
        await self.load_markets()
        market = self.market(symbol)
        method = None
        request = {
            'instrument_id': market['id'],
            # 'order_id': id,  # string
            # 'after': '1',  # pagination of data to return records earlier than the requested ledger_id
            # 'before': '1',  # P=pagination of data to return records newer than the requested ledger_id
            # 'limit': limit,  # optional, number of results per request, default = maximum = 100
        }
        type = market['type']
        if (type == 'futures') or (type == 'swap'):
            method = type + 'GetInstrumentIdPosition'
        elif type == 'option':
            underlying = self.safe_string(params, 'underlying')
            if underlying is None:
                raise ArgumentsRequired(self.id + ' fetchPosition() requires an underlying parameter for ' + type + ' market ' + symbol)
            method = type + 'GetUnderlyingPosition'
        else:
            raise NotSupported(self.id + ' fetchPosition() does not support ' + type + ' market ' + symbol + ', supported market types are futures, swap or option')
        response = await getattr(self, method)(self.extend(request, params))
        #
        # futures
        #
        #     crossed margin mode
        #
        #     {
        #         "result": True,
        #         "holding": [
        #             {
        #                 "long_qty": "2",
        #                 "long_avail_qty": "2",
        #                 "long_avg_cost": "8260",
        #                 "long_settlement_price": "8260",
        #                 "realised_pnl": "0.00020928",
        #                 "short_qty": "2",
        #                 "short_avail_qty": "2",
        #                 "short_avg_cost": "8259.99",
        #                 "short_settlement_price": "8259.99",
        #                 "liquidation_price": "113.81",
        #                 "instrument_id": "BTC-USD-191227",
        #                 "leverage": "10",
        #                 "created_at": "2019-09-25T07:58:42.129Z",
        #                 "updated_at": "2019-10-08T14:02:51.029Z",
        #                 "margin_mode": "crossed",
        #                 "short_margin": "0.00242197",
        #                 "short_pnl": "6.63E-6",
        #                 "short_pnl_ratio": "0.002477997",
        #                 "short_unrealised_pnl": "6.63E-6",
        #                 "long_margin": "0.00242197",
        #                 "long_pnl": "-6.65E-6",
        #                 "long_pnl_ratio": "-0.002478",
        #                 "long_unrealised_pnl": "-6.65E-6",
        #                 "long_settled_pnl": "0",
        #                 "short_settled_pnl": "0",
        #                 "last": "8257.57"
        #             }
        #         ],
        #         "margin_mode": "crossed"
        #     }
        #
        #     fixed margin mode
        #
        #     {
        #         "result": True,
        #         "holding": [
        #             {
        #                 "long_qty": "4",
        #                 "long_avail_qty": "4",
        #                 "long_margin": "0.00323844",
        #                 "long_liqui_price": "7762.09",
        #                 "long_pnl_ratio": "0.06052306",
        #                 "long_avg_cost": "8234.43",
        #                 "long_settlement_price": "8234.43",
        #                 "realised_pnl": "-0.00000296",
        #                 "short_qty": "2",
        #                 "short_avail_qty": "2",
        #                 "short_margin": "0.00241105",
        #                 "short_liqui_price": "9166.74",
        #                 "short_pnl_ratio": "0.03318052",
        #                 "short_avg_cost": "8295.13",
        #                 "short_settlement_price": "8295.13",
        #                 "instrument_id": "BTC-USD-191227",
        #                 "long_leverage": "15",
        #                 "short_leverage": "10",
        #                 "created_at": "2019-09-25T07:58:42.129Z",
        #                 "updated_at": "2019-10-08T13:12:09.438Z",
        #                 "margin_mode": "fixed",
        #                 "short_margin_ratio": "0.10292507",
        #                 "short_maint_margin_ratio": "0.005",
        #                 "short_pnl": "7.853E-5",
        #                 "short_unrealised_pnl": "7.853E-5",
        #                 "long_margin_ratio": "0.07103743",
        #                 "long_maint_margin_ratio": "0.005",
        #                 "long_pnl": "1.9841E-4",
        #                 "long_unrealised_pnl": "1.9841E-4",
        #                 "long_settled_pnl": "0",
        #                 "short_settled_pnl": "0",
        #                 "last": "8266.99"
        #             }
        #         ],
        #         "margin_mode": "fixed"
        #     }
        #
        # swap
        #
        #     crossed margin mode
        #
        #     {
        #         "margin_mode": "crossed",
        #         "timestamp": "2019-09-27T03:49:02.018Z",
        #         "holding": [
        #             {
        #                 "avail_position": "3",
        #                 "avg_cost": "59.49",
        #                 "instrument_id": "LTC-USD-SWAP",
        #                 "last": "55.98",
        #                 "leverage": "10.00",
        #                 "liquidation_price": "4.37",
        #                 "maint_margin_ratio": "0.0100",
        #                 "margin": "0.0536",
        #                 "position": "3",
        #                 "realized_pnl": "0.0000",
        #                 "unrealized_pnl": "0",
        #                 "settled_pnl": "-0.0330",
        #                 "settlement_price": "55.84",
        #                 "side": "long",
        #                 "timestamp": "2019-09-27T03:49:02.018Z"
        #             },
        #         ]
        #     }
        #
        #     fixed margin mode
        #
        #     {
        #         "margin_mode": "fixed",
        #         "timestamp": "2019-09-27T03:47:37.230Z",
        #         "holding": [
        #             {
        #                 "avail_position": "20",
        #                 "avg_cost": "8025.0",
        #                 "instrument_id": "BTC-USD-SWAP",
        #                 "last": "8113.1",
        #                 "leverage": "15.00",
        #                 "liquidation_price": "7002.6",
        #                 "maint_margin_ratio": "0.0050",
        #                 "margin": "0.0454",
        #                 "position": "20",
        #                 "realized_pnl": "-0.0001",
        #                 "unrealized_pnl": "0",
        #                 "settled_pnl": "0.0076",
        #                 "settlement_price": "8279.2",
        #                 "side": "long",
        #                 "timestamp": "2019-09-27T03:47:37.230Z"
        #             }
        #         ]
        #     }
        #
        # option
        #
        #     {
        #         "holding":[
        #             {
        #                 "instrument_id":"BTC-USD-190927-12500-C",
        #                 "position":"20",
        #                 "avg_cost":"3.26",
        #                 "avail_position":"20",
        #                 "settlement_price":"0.017",
        #                 "total_pnl":"50",
        #                 "pnl_ratio":"0.3",
        #                 "realized_pnl":"40",
        #                 "unrealized_pnl":"10",
        #                 "pos_margin":"100",
        #                 "option_value":"70",
        #                 "created_at":"2019-08-30T03:09:20.315Z",
        #                 "updated_at":"2019-08-30T03:40:18.318Z"
        #             },
        #             {
        #                 "instrument_id":"BTC-USD-190927-12500-P",
        #                 "position":"20",
        #                 "avg_cost":"3.26",
        #                 "avail_position":"20",
        #                 "settlement_price":"0.019",
        #                 "total_pnl":"50",
        #                 "pnl_ratio":"0.3",
        #                 "realized_pnl":"40",
        #                 "unrealized_pnl":"10",
        #                 "pos_margin":"100",
        #                 "option_value":"70",
        #                 "created_at":"2019-08-30T03:09:20.315Z",
        #                 "updated_at":"2019-08-30T03:40:18.318Z"
        #             }
        #         ]
        #     }
        #
        # todo unify parsePosition/parsePositions
        data = self.safe_value(response, 'data', [])
        position = self.safe_value(data, 0)

        return self.parse_position(position)

    async def fetch_positions(self, symbols=None, params={}):
        await self.load_markets()
        method = None
        defaultType = self.safe_string_2(self.options, 'fetchPositions', 'defaultType')
        type = self.safe_string(params, 'type', defaultType)
        if (type == 'futures') or (type == 'swap'):
            method = type + 'GetPosition'
        elif type == 'option':
            underlying = self.safe_string(params, 'underlying')
            if underlying is None:
                raise ArgumentsRequired(self.id + ' fetchPositions() requires an underlying parameter for ' + type + ' markets')
            method = type + 'GetUnderlyingPosition'
        else:
            raise NotSupported(self.id + ' fetchPositions() does not support ' + type + ' markets, supported market types are futures, swap or option')
        params = self.omit(params, 'type')
        response = await getattr(self, method)(params)
        #
        # futures
        #
        #     ...
        #
        #
        # swap
        #
        #     ...
        #
        # option
        #
        #     {
        #         "holding":[
        #             {
        #                 "instrument_id":"BTC-USD-190927-12500-C",
        #                 "position":"20",
        #                 "avg_cost":"3.26",
        #                 "avail_position":"20",
        #                 "settlement_price":"0.017",
        #                 "total_pnl":"50",
        #                 "pnl_ratio":"0.3",
        #                 "realized_pnl":"40",
        #                 "unrealized_pnl":"10",
        #                 "pos_margin":"100",
        #                 "option_value":"70",
        #                 "created_at":"2019-08-30T03:09:20.315Z",
        #                 "updated_at":"2019-08-30T03:40:18.318Z"
        #             },
        #             {
        #                 "instrument_id":"BTC-USD-190927-12500-P",
        #                 "position":"20",
        #                 "avg_cost":"3.26",
        #                 "avail_position":"20",
        #                 "settlement_price":"0.019",
        #                 "total_pnl":"50",
        #                 "pnl_ratio":"0.3",
        #                 "realized_pnl":"40",
        #                 "unrealized_pnl":"10",
        #                 "pos_margin":"100",
        #                 "option_value":"70",
        #                 "created_at":"2019-08-30T03:09:20.315Z",
        #                 "updated_at":"2019-08-30T03:40:18.318Z"
        #             }
        #         ]
        #     }
        #
        # todo unify parsePosition/parsePositions
        positions = self.safe_value(response, 'data', [])
        unifiedPositions = self.parse_positions(positions)

        return unifiedPositions

    def parse_positions(self, positions):
        result = []
        for i in positions:
            position = self.parse_position(i)
            result.append(position)
        return result

    def parse_position(self, position):
        info = position
        marketId = self.safe_string(position, 'instId')
        market = self.safe_market(marketId)
        symbol = market['symbol']
        timestamp = self.safe_integer(position, 'uTime')
        datetime = self.iso8601(timestamp)
        isolated = True if self.safe_string(position, 'mgnMode') == 'isolated' else False
        hedged = False  # TODO: not sure if you can hedge positions on okex
        contracts = self.safe_float(position, 'pos')
        side = 'long' if contracts > 0 else 'short'
        id = symbol + ":" + side
        price = self.safe_float(position, 'avgPx', 0) # TODO: do we need entry?
        markPrice = self.safe_float(position, 'last')
        notional = self.safe_float(position, 'notionalUsd')
        leverage = self.safe_float(position, 'lever')
        initialMargin = self.safe_float(position, 'imr', 1)
        maintenanceMargin = self.safe_float(position, 'mmr', 1)
        initialMarginPercentage = 1 # TODO
        maintenanceMarginPercentage = 1 # TODO
        unrealizedPnl = self.safe_float(position, 'upl', 0)
        realizedPnl = 0 # TODO
        pnl = unrealizedPnl + realizedPnl
        liquidationPrice = self.safe_float(position, 'liqPx')
        status = 'open' # TODO: can this be anything else?
        entryPrice = 0 # TODO
        marginRatio = self.safe_float(position, 'mgnRatio')
        marginType = 'isolated' if isolated else 'cross'
        percentage = unrealizedPnl / initialMargin
        collateral = None # TODO float, the maximum amount of collateral that can be lost, affected by pnl

        return {
            'info': info,
            'id': id,
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': datetime,
            'isolated': isolated,
            'hedged': hedged,
            'side': side,
            'contracts': contracts,
            'price': price,
            'markPrice': markPrice,
            'notional': notional,
            'leverage': leverage,
            'initialMargin': initialMargin,
            'maintenanceMargin': maintenanceMargin,
            'initialMarginPercentage': initialMarginPercentage,
            'maintenanceMarginPercentage': maintenanceMarginPercentage,
            'unrealizedPnl': unrealizedPnl,
            'pnl': pnl,
            'liquidationPrice': liquidationPrice,
            'status': status,
            'entryPrice': entryPrice,
            'marginRatio': marginRatio,
            'collateral': collateral,
            'marginType': marginType,
            'percentage': percentage,  # not important
        }

    async def fetch_ledger(self, code=None, since=None, limit=None, params={}):
        await self.load_markets()
        defaultType = self.safe_string_2(self.options, 'fetchLedger', 'defaultType')
        type = self.safe_string(params, 'type', defaultType)
        query = self.omit(params, 'type')
        suffix = '' if (type == 'account') else 'Accounts'
        argument = ''
        request = {
            # 'from': 'id',
            # 'to': 'id',
        }
        if limit is not None:
            request['limit'] = limit
        currency = None
        if type == 'spot':
            if code is None:
                raise ArgumentsRequired(self.id + " fetchLedger() requires a currency code argument for '" + type + "' markets")
            argument = 'Currency'
            currency = self.currency(code)
            request['currency'] = currency['id']
        elif type == 'futures':
            if code is None:
                raise ArgumentsRequired(self.id + " fetchLedger() requires an underlying symbol for '" + type + "' markets")
            argument = 'Underlying'
            market = self.market(code)  # we intentionally put a market inside here for the margin and swap ledgers
            marketInfo = self.safe_value(market, 'info', {})
            settlementCurrencyId = self.safe_string(marketInfo, 'settlement_currency')
            settlementCurrencyСode = self.safe_currency_code(settlementCurrencyId)
            currency = self.currency(settlementCurrencyСode)
            underlyingId = self.safe_string(marketInfo, 'underlying')
            request['underlying'] = underlyingId
        elif (type == 'margin') or (type == 'swap'):
            if code is None:
                raise ArgumentsRequired(self.id + " fetchLedger() requires a code argument(a market symbol) for '" + type + "' markets")
            argument = 'InstrumentId'
            market = self.market(code)  # we intentionally put a market inside here for the margin and swap ledgers
            currency = self.currency(market['base'])
            request['instrument_id'] = market['id']
            #
            #     if type == 'margin':
            #         #
            #         #      3. Borrow
            #         #      4. Repayment
            #         #      5. Interest
            #         #      7. Buy
            #         #      8. Sell
            #         #      9. From capital account
            #         #     10. From C2C
            #         #     11. From Futures
            #         #     12. From Spot
            #         #     13. From ETT
            #         #     14. To capital account
            #         #     15. To C2C
            #         #     16. To Spot
            #         #     17. To Futures
            #         #     18. To ETT
            #         #     19. Mandatory Repayment
            #         #     20. From Piggybank
            #         #     21. To Piggybank
            #         #     22. From Perpetual
            #         #     23. To Perpetual
            #         #     24. Liquidation Fee
            #         #     54. Clawback
            #         #     59. Airdrop Return.
            #         #
            #         request['type'] = 'number'  # All types will be returned if self filed is left blank
            #     }
            #
        elif type == 'account':
            if code is not None:
                currency = self.currency(code)
                request['currency'] = currency['id']
            #
            #     #
            #     #      1. deposit
            #     #      2. withdrawal
            #     #     13. cancel withdrawal
            #     #     18. into futures account
            #     #     19. out of futures account
            #     #     20. into sub account
            #     #     21. out of sub account
            #     #     28. claim
            #     #     29. into ETT account
            #     #     30. out of ETT account
            #     #     31. into C2C account
            #     #     32. out of C2C account
            #     #     33. into margin account
            #     #     34. out of margin account
            #     #     37. into spot account
            #     #     38. out of spot account
            #     #
            #     request['type'] = 'number'
            #
        else:
            raise NotSupported(self.id + " fetchLedger does not support the '" + type + "' type(the type must be one of 'account', 'spot', 'margin', 'futures', 'swap')")
        method = type + 'Get' + suffix + argument + 'Ledger'
        response = await getattr(self, method)(self.extend(request, query))
        #
        # transfer     funds transfer in/out
        # trade        funds moved as a result of a trade, spot and margin accounts only
        # rebate       fee rebate as per fee schedule, spot and margin accounts only
        # match        open long/open short/close long/close short(futures) or a change in the amount because of trades(swap)
        # fee          fee, futures only
        # settlement   settlement/clawback/settle long/settle short
        # liquidation  force close long/force close short/deliver close long/deliver close short
        # funding      funding fee, swap only
        # margin       a change in the amount after adjusting margin, swap only
        #
        # account
        #
        #     [
        #         {
        #             "amount":0.00051843,
        #             "balance":0.00100941,
        #             "currency":"BTC",
        #             "fee":0,
        #             "ledger_id":8987285,
        #             "timestamp":"2018-10-12T11:01:14.000Z",
        #             "typename":"Get from activity"
        #         }
        #     ]
        #
        # spot
        #
        #     [
        #         {
        #             "timestamp":"2019-03-18T07:08:25.000Z",
        #             "ledger_id":"3995334780",
        #             "created_at":"2019-03-18T07:08:25.000Z",
        #             "currency":"BTC",
        #             "amount":"0.0009985",
        #             "balance":"0.0029955",
        #             "type":"trade",
        #             "details":{
        #                 "instrument_id":"BTC-USDT",
        #                 "order_id":"2500650881647616",
        #                 "product_id":"BTC-USDT"
        #             }
        #         }
        #     ]
        #
        # margin
        #
        #     [
        #         [
        #             {
        #                 "created_at":"2019-03-20T03:45:05.000Z",
        #                 "ledger_id":"78918186",
        #                 "timestamp":"2019-03-20T03:45:05.000Z",
        #                 "currency":"EOS",
        #                 "amount":"0",  # ?
        #                 "balance":"0.59957711",
        #                 "type":"transfer",
        #                 "details":{
        #                     "instrument_id":"EOS-USDT",
        #                     "order_id":"787057",
        #                     "product_id":"EOS-USDT"
        #                 }
        #             }
        #         ],
        #         {
        #             "before":"78965766",
        #             "after":"78918186"
        #         }
        #     ]
        #
        # futures
        #
        #     [
        #         {
        #             "ledger_id":"2508090544914461",
        #             "timestamp":"2019-03-19T14:40:24.000Z",
        #             "amount":"-0.00529521",
        #             "balance":"0",
        #             "currency":"EOS",
        #             "type":"fee",
        #             "details":{
        #                 "order_id":"2506982456445952",
        #                 "instrument_id":"EOS-USD-190628"
        #             }
        #         }
        #     ]
        #
        # swap
        #
        #     [
        #         {
        #             "amount":"0.004742",
        #             "fee":"-0.000551",
        #             "type":"match",
        #             "instrument_id":"EOS-USD-SWAP",
        #             "ledger_id":"197429674941902848",
        #             "timestamp":"2019-03-25T05:56:31.286Z"
        #         },
        #     ]
        #
        responseLength = len(response)
        if responseLength < 1:
            return []
        isArray = isinstance(response[0], list)
        isMargin = (type == 'margin')
        entries = response[0] if (isMargin and isArray) else response
        if type == 'swap':
            ledgerEntries = self.parse_ledger(entries)
            return self.filter_by_symbol_since_limit(ledgerEntries, code, since, limit)
        return self.parse_ledger(entries, currency, since, limit)

    def parse_ledger_entry_type(self, type):
        types = {
            'transfer': 'transfer',  # # funds transfer in/out
            'trade': 'trade',  # funds moved as a result of a trade, spot and margin accounts only
            'rebate': 'rebate',  # fee rebate as per fee schedule, spot and margin accounts only
            'match': 'trade',  # open long/open short/close long/close short(futures) or a change in the amount because of trades(swap)
            'fee': 'fee',  # fee, futures only
            'settlement': 'trade',  # settlement/clawback/settle long/settle short
            'liquidation': 'trade',  # force close long/force close short/deliver close long/deliver close short
            'funding': 'fee',  # funding fee, swap only
            'margin': 'margin',  # a change in the amount after adjusting margin, swap only
        }
        return self.safe_string(types, type, type)

    def parse_ledger_entry(self, item, currency=None):
        #
        #
        # account
        #
        #     {
        #         "amount":0.00051843,
        #         "balance":0.00100941,
        #         "currency":"BTC",
        #         "fee":0,
        #         "ledger_id":8987285,
        #         "timestamp":"2018-10-12T11:01:14.000Z",
        #         "typename":"Get from activity"
        #     }
        #
        # spot
        #
        #     {
        #         "timestamp":"2019-03-18T07:08:25.000Z",
        #         "ledger_id":"3995334780",
        #         "created_at":"2019-03-18T07:08:25.000Z",
        #         "currency":"BTC",
        #         "amount":"0.0009985",
        #         "balance":"0.0029955",
        #         "type":"trade",
        #         "details":{
        #             "instrument_id":"BTC-USDT",
        #             "order_id":"2500650881647616",
        #             "product_id":"BTC-USDT"
        #         }
        #     }
        #
        # margin
        #
        #     {
        #         "created_at":"2019-03-20T03:45:05.000Z",
        #         "ledger_id":"78918186",
        #         "timestamp":"2019-03-20T03:45:05.000Z",
        #         "currency":"EOS",
        #         "amount":"0",  # ?
        #         "balance":"0.59957711",
        #         "type":"transfer",
        #         "details":{
        #             "instrument_id":"EOS-USDT",
        #             "order_id":"787057",
        #             "product_id":"EOS-USDT"
        #         }
        #     }
        #
        # futures
        #
        #     {
        #         "ledger_id":"2508090544914461",
        #         "timestamp":"2019-03-19T14:40:24.000Z",
        #         "amount":"-0.00529521",
        #         "balance":"0",
        #         "currency":"EOS",
        #         "type":"fee",
        #         "details":{
        #             "order_id":"2506982456445952",
        #             "instrument_id":"EOS-USD-190628"
        #         }
        #     }
        #
        # swap
        #
        #     {
        #         "amount":"0.004742",
        #         "fee":"-0.000551",
        #         "type":"match",
        #         "instrument_id":"EOS-USD-SWAP",
        #         "ledger_id":"197429674941902848",
        #         "timestamp":"2019-03-25T05:56:31.286Z"
        #     },
        #
        id = self.safe_string(item, 'ledger_id')
        account = None
        details = self.safe_value(item, 'details', {})
        referenceId = self.safe_string(details, 'order_id')
        referenceAccount = None
        type = self.parse_ledger_entry_type(self.safe_string(item, 'type'))
        code = self.safe_currency_code(self.safe_string(item, 'currency'), currency)
        amount = self.safe_number(item, 'amount')
        timestamp = self.parse8601(self.safe_string(item, 'timestamp'))
        fee = {
            'cost': self.safe_number(item, 'fee'),
            'currency': code,
        }
        before = None
        after = self.safe_number(item, 'balance')
        status = 'ok'
        marketId = self.safe_string(item, 'instrument_id')
        symbol = None
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            symbol = market['symbol']
        return {
            'info': item,
            'id': id,
            'account': account,
            'referenceId': referenceId,
            'referenceAccount': referenceAccount,
            'type': type,
            'currency': code,
            'symbol': symbol,
            'amount': amount,
            'before': before,  # balance before
            'after': after,  # balance after
            'status': status,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'fee': fee,
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        isArray = isinstance(params, list)
        request = '/api/' + self.version + '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        url = self.implode_hostname(self.urls['api']['rest']) + request
        # type = self.getPathAuthenticationType(path)
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        elif api == 'private':
            self.check_required_credentials()
            timestamp = self.iso8601(self.milliseconds())
            headers = {
                'OK-ACCESS-KEY': self.apiKey,
                'OK-ACCESS-PASSPHRASE': self.password,
                'OK-ACCESS-TIMESTAMP': timestamp,
                # 'OK-FROM': '',
                # 'OK-TO': '',
                # 'OK-LIMIT': '',
            }
            auth = timestamp + method + request
            if method == 'GET':
                if query:
                    urlencodedQuery = '?' + self.urlencode(query)
                    url += urlencodedQuery
                    auth += urlencodedQuery
            else:
                if isArray or query:
                    body = self.json(query)
                    auth += body
                headers['Content-Type'] = 'application/json'
            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')
            headers['OK-ACCESS-SIGN'] = signature
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def get_path_authentication_type(self, path):
        # https://github.com/ccxt/ccxt/issues/6651
        # a special case to handle the optionGetUnderlying interefering with
        # other endpoints containing self keyword
        if path == 'underlying':
            return 'public'
        auth = self.safe_value(self.options, 'auth', {})
        key = self.find_broadly_matched_key(auth, path)
        return self.safe_string(auth, key, 'private')

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if not response:
            return  # fallback to default error handler
        feedback = self.id + ' ' + body
        if code == 503:
            # {"message":"name resolution failed"}
            raise ExchangeNotAvailable(feedback)
        #
        #     {"error_message":"Order does not exist","result":"true","error_code":"35029","order_id":"-1"}
        #
        message = self.safe_string(response, 'message')
        errorCode = self.safe_string_2(response, 'code', 'error_code')
        nonEmptyMessage = ((message is not None) and (message != ''))
        nonZeroErrorCode = (errorCode is not None) and (errorCode != '0')
        if nonEmptyMessage:
            self.throw_exactly_matched_exception(self.exceptions['exact'], message, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
        if nonZeroErrorCode:
            self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)
        if nonZeroErrorCode or nonEmptyMessage:
            raise ExchangeError(feedback)  # unknown message
